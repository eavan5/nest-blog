var COMPODOC_SEARCH_INDEX = {
  "index": { "version": "2.3.9", "fields": ["title", "body"], "fieldVectors": [["title/classes/AddArticleDTO.html", [0, 0.013, 1, 2.253]], ["body/classes/AddArticleDTO.html", [0, 0.016, 1, 2.791, 2, 1.296, 3, 0.179, 4, 0.179, 5, 0.153, 6, 2.479, 7, 0.292, 8, 1.501, 9, 3.453, 10, 1.036, 11, 3.623, 12, 2.958, 13, 3.623, 14, 3.95, 15, 4.118, 16, 0.792, 17, 0.026, 18, 1.292, 19, 2.157, 20, 4.179, 21, 2.791, 22, 1.018, 23, 2.931, 24, 3.109, 25, 3.534, 26, 4.935, 27, 2.186, 28, 3.898, 29, 2.931, 30, 2.538, 31, 2.931, 32, 2.931, 33, 3.534, 34, 2.04, 35, 2.931, 36, 2.931, 37, 0.374, 38, 3.623, 39, 2.181, 40, 1.632, 41, 5.078, 42, 1.78, 43, 0.179, 44, 2.479, 45, 1.749, 46, 1.78, 47, 1.78, 48, 3.534, 49, 3.534, 50, 0.011, 51, 0.016, 52, 0.011]], ["title/classes/AddCommentDTO.html", [0, 0.013, 53, 2.253]], ["body/classes/AddCommentDTO.html", [0, 0.017, 2, 1.488, 3, 0.206, 4, 0.206, 5, 0.176, 7, 0.335, 8, 1.653, 9, 3.38, 12, 3.186, 16, 0.779, 17, 0.026, 18, 1.272, 19, 2.016, 22, 0.952, 24, 3.424, 25, 2.847, 26, 4.769, 27, 2.322, 28, 4.072, 34, 2.167, 37, 0.412, 38, 3.902, 39, 2.504, 40, 1.874, 41, 4.994, 42, 2.044, 43, 0.206, 45, 1.884, 46, 2.044, 47, 2.044, 50, 0.012, 51, 0.017, 52, 0.012, 53, 3.075, 54, 2.847, 55, 3.186, 56, 0.692, 57, 4.604, 58, 3.367, 59, 3.367, 60, 3.367, 61, 4.604, 62, 3.367, 63, 3.367, 64, 3.893, 65, 2.847]], ["title/classes/AddMetaDTO.html", [0, 0.013, 66, 2.253]], ["body/classes/AddMetaDTO.html", [0, 0.019, 2, 1.788, 3, 0.247, 4, 0.247, 5, 0.211, 7, 0.402, 8, 1.867, 9, 3.432, 16, 0.847, 17, 0.026, 18, 1.184, 19, 2.208, 22, 1.042, 24, 3.868, 34, 1.998, 37, 0.362, 38, 4.275, 40, 2.252, 43, 0.247, 50, 0.015, 51, 0.019, 52, 0.015, 56, 0.758, 66, 3.473, 67, 3.42, 68, 4.859, 69, 4.045, 70, 4.045, 71, 2.67, 72, 4.045, 73, 4.045, 74, 4.045, 75, 4.045, 76, 3.42]], ["title/controllers/AppController.html", [77, 1.296, 78, 2.253]], ["body/controllers/AppController.html", [0, 0.017, 3, 0.286, 4, 0.286, 5, 0.244, 9, 2.402, 17, 0.026, 18, 0.913, 37, 0.509, 43, 0.286, 50, 0.017, 51, 0.021, 52, 0.017, 77, 2.189, 78, 3.804, 79, 1.798, 80, 3.956, 81, 0.728, 82, 3.419, 83, 3.956, 84, 2.605, 85, 3.956, 86, 1.204, 87, 4.679]], ["title/modules/AppModule.html", [88, 1.133, 89, 2.253]], ["body/modules/AppModule.html", [0, 0.01, 3, 0.162, 4, 0.162, 5, 0.138, 17, 0.026, 37, 0.568, 43, 0.162, 45, 0.952, 50, 0.01, 51, 0.014, 52, 0.01, 56, 0.35, 78, 3.074, 79, 1.494, 81, 0.413, 82, 3.139, 83, 2.242, 86, 0.683, 88, 1.545, 89, 4.383, 90, 1.172, 91, 1.172, 92, 1.362, 93, 1.362, 94, 1.172, 95, 2.363, 96, 1.362, 97, 2.242, 98, 2.242, 99, 2.242, 100, 3.424, 101, 3.424, 102, 3.424, 103, 3.424, 104, 2.895, 105, 1.996, 106, 1.362, 107, 1.362, 108, 2.652, 109, 2.795, 110, 2.795, 111, 1.261, 112, 1.261, 113, 1.849, 114, 1.261, 115, 2.164, 116, 2.652, 117, 1.261, 118, 1.973, 119, 2.652, 120, 1.261, 121, 1.362, 122, 1.305, 123, 1.61, 124, 1.61, 125, 1.261, 126, 1.261, 127, 2.652, 128, 2.652, 129, 1.771, 130, 1.019, 131, 2.652, 132, 2.652, 133, 2.652, 134, 2.652, 135, 2.652, 136, 2.652, 137, 3.887, 138, 2.242, 139, 3.887, 140, 2.652, 141, 2.652, 142, 2.652, 143, 2.652, 144, 2.652, 145, 2.652, 146, 2.596, 147, 2.652, 148, 1.973, 149, 2.652, 150, 2.652, 151, 2.652, 152, 2.652, 153, 2.652, 154, 2.652, 155, 2.652, 156, 2.652, 157, 0.952, 158, 4.602, 159, 2.652, 160, 2.652, 161, 2.652, 162, 2.652, 163, 2.242, 164, 2.242, 165, 2.652, 166, 2.242]], ["title/injectables/AppService.html", [82, 1.878, 167, 0.612]], ["body/injectables/AppService.html", [0, 0.017, 3, 0.288, 4, 0.288, 5, 0.246, 7, 0.469, 17, 0.025, 18, 1.117, 22, 0.855, 37, 0.422, 43, 0.288, 50, 0.017, 51, 0.021, 52, 0.017, 81, 0.734, 82, 3.186, 85, 5.418, 86, 1.213, 167, 1.038, 168, 1.812, 169, 3.987, 170, 1.683, 171, 4.715, 172, 1.297, 173, 4.715, 174, 4.715]], ["title/classes/Article.html", [0, 0.013, 175, 1.605]], ["body/classes/Article.html", [0, 0.01, 2, 1.217, 3, 0.168, 4, 0.168, 5, 0.144, 7, 0.398, 8, 1.435, 11, 3.498, 12, 2.855, 13, 3.498, 14, 3.498, 15, 3.976, 16, 0.844, 17, 0.026, 18, 1.236, 19, 2.402, 22, 1.134, 34, 1.058, 37, 0.421, 43, 0.244, 46, 2.855, 47, 2.855, 48, 2.328, 49, 2.328, 50, 0.01, 51, 0.015, 52, 0.01, 71, 3.027, 130, 1.058, 146, 3.445, 175, 1.9, 176, 2.048, 177, 2.618, 178, 4.702, 179, 3.976, 180, 5.003, 181, 2.753, 182, 2.804, 183, 4.702, 184, 2.753, 185, 2.753, 186, 2.753, 187, 2.753, 188, 2.753, 189, 2.753, 190, 2.328, 191, 3.995, 192, 2.753, 193, 2.753, 194, 2.753, 195, 2.224, 196, 2.048, 197, 2.972, 198, 2.753, 199, 2.753, 200, 2.328, 201, 3.378, 202, 4.362, 203, 2.753, 204, 3.995, 205, 2.328, 206, 0.925, 207, 1.839, 208, 2.328]], ["title/controllers/ArticleController.html", [77, 1.296, 209, 2.253]], ["body/controllers/ArticleController.html", [0, 0.007, 1, 3.628, 3, 0.11, 4, 0.11, 5, 0.094, 7, 0.178, 10, 1.027, 16, 0.777, 17, 0.026, 18, 0.703, 19, 2.087, 21, 1.922, 22, 0.985, 27, 0.739, 37, 0.498, 42, 1.089, 43, 0.11, 45, 0.644, 50, 0.013, 51, 0.011, 52, 0.007, 53, 3.22, 56, 0.751, 77, 0.689, 79, 0.689, 81, 0.279, 84, 0.999, 86, 1.398, 111, 0.853, 112, 0.853, 113, 1.369, 114, 0.853, 115, 1.602, 117, 0.853, 120, 0.853, 121, 0.921, 122, 0.602, 123, 1.089, 124, 1.089, 125, 0.853, 126, 0.853, 146, 1.922, 157, 1.731, 170, 0.846, 172, 1.495, 175, 2.148, 177, 1.602, 205, 2.433, 206, 1.517, 209, 1.922, 210, 1.517, 211, 1.198, 212, 2.878, 213, 2.433, 214, 4.125, 215, 2.878, 216, 2.878, 217, 2.141, 218, 2.878, 219, 2.433, 220, 1.794, 221, 2.433, 222, 1.794, 223, 1.794, 224, 1.548, 225, 3.578, 226, 1.794, 227, 1.794, 228, 1.794, 229, 3.819, 230, 1.794, 231, 1.794, 232, 3.99, 233, 1.794, 234, 1.794, 235, 1.794, 236, 2.878, 237, 1.794, 238, 1.794, 239, 3.819, 240, 2.505, 241, 2.878, 242, 1.794, 243, 1.794, 244, 2.878, 245, 1.794, 246, 1.794, 247, 2.684, 248, 1.794, 249, 3.604, 250, 1.794, 251, 2.878, 252, 1.794, 253, 1.794, 254, 1.794, 255, 1.794, 256, 1.794, 257, 1.517, 258, 1.794, 259, 1.794, 260, 1.198, 261, 1.748, 262, 1.334, 263, 2.878, 264, 1.334, 265, 1.334, 266, 2.007, 267, 1.517, 268, 1.334, 269, 0.921, 270, 1.517, 271, 1.794, 272, 2.296, 273, 1.334, 274, 1.794, 275, 1.794, 276, 4.125, 277, 3.488, 278, 3.604, 279, 1.794, 280, 1.794, 281, 1.794, 282, 1.794, 283, 2.189, 284, 2.189, 285, 1.089, 286, 1.484, 287, 2.878, 288, 2.878, 289, 1.794, 290, 1.794, 291, 1.794, 292, 1.794, 293, 1.794, 294, 1.794, 295, 2.681, 296, 2.681, 297, 1.794, 298, 1.794, 299, 1.794, 300, 1.794, 301, 1.794, 302, 2.681, 303, 1.794, 304, 1.794, 305, 1.794, 306, 1.794, 307, 1.794, 308, 1.794, 309, 1.794, 310, 1.794, 311, 1.794]], ["title/interfaces/ArticleList.html", [247, 1.878, 312, 1.389]], ["body/interfaces/ArticleList.html", [3, 0.273, 4, 0.273, 5, 0.233, 7, 0.445, 8, 1.99, 10, 1.228, 16, 0.731, 17, 0.025, 18, 1.286, 43, 0.338, 50, 0.017, 51, 0.021, 52, 0.017, 71, 2.845, 240, 3.656, 247, 3.085, 283, 2.716, 284, 2.716, 312, 2.282, 313, 2.716, 314, 3.328, 315, 3.701, 316, 4.68, 317, 4.68]], ["title/modules/ArticleModule.html", [88, 1.133, 100, 2.049]], ["body/modules/ArticleModule.html", [0, 0.013, 3, 0.211, 4, 0.211, 5, 0.181, 17, 0.026, 37, 0.562, 43, 0.211, 45, 1.243, 50, 0.013, 51, 0.017, 52, 0.013, 56, 0.619, 79, 1.803, 81, 0.539, 88, 1.787, 90, 1.53, 91, 1.53, 92, 1.778, 93, 1.778, 94, 1.53, 95, 2.733, 96, 1.778, 100, 3.733, 105, 2.409, 106, 1.778, 107, 1.778, 110, 2.102, 111, 1.647, 112, 1.647, 113, 2.232, 114, 1.647, 115, 2.612, 117, 1.647, 120, 1.647, 121, 2.409, 125, 1.647, 126, 1.647, 129, 2.312, 130, 1.33, 175, 1.647, 182, 1.647, 195, 2.612, 207, 3.134, 209, 3.555, 257, 2.927, 266, 3.423, 267, 2.927, 318, 2.927, 319, 2.927, 320, 3.462, 321, 3.462, 322, 3.462, 323, 3.462, 324, 2.312, 325, 2.575, 326, 3.462, 327, 3.462, 328, 2.849, 329, 2.927, 330, 3.967, 331, 3.49, 332, 3.49, 333, 3.462, 334, 2.927]], ["title/injectables/ArticleService.html", [167, 0.612, 266, 1.878]], ["body/injectables/ArticleService.html", [0, 0.005, 3, 0.084, 4, 0.084, 5, 0.071, 7, 0.297, 10, 0.96, 11, 1.018, 12, 1.399, 14, 1.018, 16, 0.624, 17, 0.026, 18, 1.044, 22, 0.948, 27, 2.025, 28, 0.914, 34, 0.885, 37, 0.403, 43, 0.084, 44, 1.157, 46, 0.831, 47, 0.831, 50, 0.009, 51, 0.009, 52, 0.005, 56, 0.649, 71, 1.532, 81, 0.359, 86, 1.345, 130, 0.526, 148, 1.714, 157, 2.284, 166, 1.157, 167, 0.418, 168, 0.526, 170, 0.677, 172, 1.399, 175, 2.546, 177, 0.762, 179, 2.523, 200, 1.157, 206, 1.868, 213, 1.948, 217, 1.018, 219, 2.523, 224, 1.446, 225, 2.125, 229, 3.806, 239, 2.959, 247, 1.949, 260, 0.914, 266, 1.283, 270, 1.157, 283, 1.399, 284, 2.125, 285, 1.399, 286, 2.152, 302, 3.659, 316, 1.714, 317, 1.714, 330, 1.157, 335, 1.157, 336, 2.304, 337, 2.304, 338, 3.5, 339, 2.984, 340, 3.5, 341, 1.948, 342, 2.304, 343, 2.304, 344, 1.183, 345, 1.369, 346, 2.523, 347, 1.369, 348, 2.304, 349, 2.304, 350, 1.369, 351, 3.564, 352, 2.304, 353, 1.369, 354, 3.997, 355, 1.369, 356, 2.304, 357, 1.369, 358, 1.369, 359, 3.5, 360, 2.219, 361, 3.5, 362, 1.369, 363, 1.018, 364, 1.948, 365, 1.369, 366, 2.304, 367, 1.369, 368, 2.304, 369, 1.369, 370, 1.369, 371, 2.304, 372, 1.369, 373, 1.369, 374, 3.5, 375, 1.369, 376, 2.304, 377, 2.304, 378, 1.018, 379, 1.369, 380, 2.219, 381, 1.369, 382, 2.304, 383, 1.369, 384, 1.661, 385, 1.369, 386, 1.369, 387, 1.369, 388, 2.984, 389, 1.369, 390, 1.948, 391, 1.369, 392, 2.984, 393, 1.369, 394, 1.369, 395, 1.369, 396, 1.369, 397, 2.304, 398, 2.304, 399, 1.369, 400, 2.304, 401, 1.369, 402, 1.948, 403, 1.369, 404, 1.369, 405, 2.304, 406, 2.304, 407, 2.219, 408, 2.304, 409, 1.369, 410, 2.304, 411, 1.369, 412, 1.665, 413, 1.369, 414, 1.369, 415, 1.993, 416, 1.993, 417, 1.283, 418, 1.096, 419, 1.369, 420, 1.399, 421, 1.948, 422, 1.369, 423, 1.157, 424, 1.369, 425, 1.369, 426, 1.369, 427, 1.369, 428, 1.369, 429, 1.157, 430, 1.369, 431, 1.369, 432, 2.523, 433, 1.369, 434, 1.157, 435, 1.369, 436, 1.369, 437, 1.369, 438, 2.304, 439, 1.369, 440, 2.984, 441, 1.369, 442, 1.369, 443, 1.369, 444, 1.369, 445, 2.304, 446, 1.369, 447, 1.369, 448, 1.369, 449, 2.304, 450, 1.369, 451, 1.369, 452, 1.369, 453, 1.369, 454, 1.369, 455, 1.369, 456, 1.369]], ["title/modules/AuthModule.html", [88, 1.133, 101, 2.049]], ["body/modules/AuthModule.html", [0, 0.012, 3, 0.192, 4, 0.192, 5, 0.164, 17, 0.026, 37, 0.559, 43, 0.192, 45, 1.128, 50, 0.012, 51, 0.016, 52, 0.012, 56, 0.415, 81, 0.489, 88, 1.699, 90, 1.389, 91, 1.389, 92, 1.613, 93, 1.613, 94, 1.389, 95, 2.597, 96, 2.597, 101, 4.013, 104, 3.065, 105, 2.254, 106, 1.613, 107, 1.613, 110, 2.665, 111, 1.494, 112, 1.494, 113, 2.088, 114, 2.088, 115, 1.749, 117, 1.494, 120, 2.088, 122, 1.055, 123, 1.908, 124, 1.908, 125, 1.494, 126, 1.494, 269, 1.613, 457, 2.657, 458, 2.657, 459, 3.142, 460, 2.657, 461, 3.12, 462, 3.323, 463, 3.624, 464, 3.142, 465, 3.142, 466, 2.657, 467, 3.142, 468, 2.657, 469, 2.657, 470, 3.142, 471, 2.657, 472, 3.142, 473, 3.142, 474, 3.142, 475, 3.142, 476, 3.142, 477, 2.337, 478, 2.099, 479, 2.337, 480, 3.142, 481, 3.142, 482, 2.099, 483, 3.142, 484, 2.657, 485, 2.657, 486, 3.142, 487, 3.142, 488, 3.142, 489, 2.657]], ["title/injectables/AuthService.html", [167, 0.612, 461, 1.605]], ["body/injectables/AuthService.html", [0, 0.009, 3, 0.145, 4, 0.145, 5, 0.124, 7, 0.236, 8, 1.284, 9, 1.836, 10, 0.936, 16, 0.633, 17, 0.026, 18, 1.257, 22, 0.933, 27, 0.976, 34, 1.654, 37, 0.429, 43, 0.145, 50, 0.009, 51, 0.013, 52, 0.009, 56, 0.763, 76, 2.004, 81, 0.369, 86, 1.234, 122, 0.796, 157, 1.546, 167, 0.649, 168, 0.911, 170, 1.051, 172, 1.185, 206, 1.817, 224, 1.41, 286, 0.976, 344, 1.836, 351, 2.171, 354, 2.004, 360, 3.567, 364, 2.004, 384, 1.991, 407, 1.763, 412, 1.701, 415, 1.583, 416, 1.583, 417, 2.397, 418, 2.048, 461, 1.701, 462, 2.67, 477, 1.763, 482, 2.388, 489, 3.641, 490, 2.004, 491, 3.575, 492, 4.305, 493, 4.305, 494, 2.37, 495, 2.462, 496, 5.616, 497, 2.37, 498, 3.575, 499, 3.575, 500, 2.37, 501, 2.37, 502, 4.305, 503, 3.614, 504, 2.37, 505, 4.305, 506, 2.37, 507, 3.125, 508, 2.37, 509, 2.37, 510, 3.567, 511, 1.763, 512, 2.37, 513, 1.583, 514, 2.004, 515, 2.37, 516, 3.023, 517, 2.66, 518, 2.37, 519, 2.37, 520, 3.575, 521, 2.37, 522, 2.37, 523, 3.575, 524, 2.004, 525, 2.37, 526, 2.37, 527, 3.203, 528, 3.641, 529, 3.641, 530, 2.004, 531, 2.37, 532, 2.37, 533, 2.37, 534, 2.37]], ["title/interfaces/Comment.html", [177, 1.878, 312, 1.389]], ["body/interfaces/Comment.html", [3, 0.27, 4, 0.27, 5, 0.231, 7, 0.44, 8, 1.976, 10, 1.074, 16, 0.827, 17, 0.025, 18, 1.348, 43, 0.27, 50, 0.016, 51, 0.02, 52, 0.016, 55, 3.806, 56, 0.827, 177, 3.659, 312, 1.822, 313, 2.687, 324, 4.186, 535, 3.742]], ["title/classes/HttpExceptionFilter.html", [0, 0.013, 536, 2.51]], ["body/classes/HttpExceptionFilter.html", [0, 0.013, 2, 1.584, 3, 0.219, 4, 0.219, 5, 0.187, 7, 0.357, 10, 0.699, 16, 0.634, 17, 0.026, 22, 0.65, 30, 2.176, 34, 2.224, 37, 0.32, 43, 0.219, 50, 0.013, 51, 0.018, 52, 0.013, 56, 0.473, 81, 0.558, 170, 1.412, 172, 0.986, 206, 2.086, 224, 1.054, 412, 1.704, 415, 3.618, 416, 2.393, 420, 2.176, 510, 4.488, 511, 2.666, 527, 2.666, 536, 3.572, 537, 4.061, 538, 3.03, 539, 3.207, 540, 5.416, 541, 4.802, 542, 5.416, 543, 5.786, 544, 3.583, 545, 4.802, 546, 3.03, 547, 3.03, 548, 3.583, 549, 3.583, 550, 3.583, 551, 2.176, 552, 3.583, 553, 3.583, 554, 3.583, 555, 3.583, 556, 3.583, 557, 3.583, 558, 3.572, 559, 3.572, 560, 3.583, 561, 3.583, 562, 3.583, 563, 3.583, 564, 3.583, 565, 3.583, 566, 3.583, 567, 3.583, 568, 3.03, 569, 3.583]], ["title/injectables/JwtStrategy.html", [167, 0.612, 462, 1.878]], ["body/injectables/JwtStrategy.html", [0, 0.013, 3, 0.218, 4, 0.218, 5, 0.186, 7, 0.356, 10, 0.935, 16, 0.632, 17, 0.026, 22, 0.869, 34, 1.373, 37, 0.539, 43, 0.218, 50, 0.013, 51, 0.018, 52, 0.013, 56, 0.632, 81, 0.556, 84, 1.989, 86, 0.919, 122, 1.609, 146, 2.386, 148, 2.658, 157, 1.942, 167, 0.869, 168, 1.373, 170, 1.409, 172, 0.983, 206, 1.2, 224, 1.409, 269, 1.835, 286, 1.471, 315, 2.386, 344, 1.835, 417, 1.989, 418, 1.699, 461, 2.952, 462, 2.668, 478, 2.386, 479, 2.658, 482, 3.201, 485, 3.021, 517, 2.658, 530, 4.053, 570, 3.021, 571, 3.565, 572, 3.021, 573, 3.573, 574, 4.793, 575, 3.573, 576, 3.573, 577, 3.021, 578, 2.658, 579, 3.021, 580, 4.053, 581, 3.573, 582, 3.021, 583, 3.021, 584, 3.573, 585, 3.573, 586, 3.573, 587, 3.573, 588, 3.573, 589, 3.573, 590, 3.573, 591, 3.021, 592, 3.573, 593, 3.573, 594, 3.573]], ["title/injectables/LocalStrategy.html", [167, 0.612, 463, 2.049]], ["body/injectables/LocalStrategy.html", [0, 0.014, 3, 0.229, 4, 0.229, 5, 0.196, 7, 0.373, 9, 1.924, 10, 0.965, 16, 0.653, 17, 0.026, 18, 1.227, 22, 0.897, 37, 0.527, 43, 0.229, 50, 0.014, 51, 0.018, 52, 0.014, 56, 0.731, 81, 0.583, 84, 2.087, 86, 0.965, 122, 1.86, 157, 1.989, 167, 0.897, 168, 1.44, 170, 1.455, 172, 1.031, 206, 1.259, 224, 1.455, 269, 1.924, 286, 1.543, 315, 2.503, 344, 1.924, 351, 3.004, 417, 2.087, 418, 1.783, 461, 2.992, 463, 3.004, 471, 3.169, 507, 3.577, 571, 3.68, 572, 3.169, 577, 3.169, 578, 2.788, 579, 3.169, 580, 4.184, 582, 3.169, 583, 3.169, 595, 3.169, 596, 3.748, 597, 4.948, 598, 3.748, 599, 3.169, 600, 3.748]], ["title/classes/Meta.html", [0, 0.013, 182, 1.605]], ["body/classes/Meta.html", [0, 0.013, 2, 1.517, 3, 0.21, 4, 0.21, 5, 0.179, 7, 0.342, 8, 1.675, 10, 1.109, 13, 3.942, 16, 0.863, 17, 0.026, 18, 1.197, 19, 2.357, 21, 2.293, 22, 1.112, 37, 0.474, 43, 0.285, 50, 0.013, 51, 0.017, 52, 0.013, 56, 0.699, 68, 4.481, 71, 3.053, 130, 1.319, 175, 2.828, 180, 3.942, 182, 2.219, 190, 2.903, 195, 2.597, 196, 2.553, 197, 3.47, 201, 2.903, 202, 3.945, 206, 1.153, 328, 2.084, 390, 2.903, 601, 2.553, 602, 4.481, 603, 5.299, 604, 5.186, 605, 3.433, 606, 3.433, 607, 3.433, 608, 3.433, 609, 5.686, 610, 3.433, 611, 3.433, 612, 3.433, 613, 3.433, 614, 2.903]], ["title/controllers/MetaController.html", [77, 1.296, 615, 2.253]], ["body/controllers/MetaController.html", [0, 0.01, 3, 0.167, 4, 0.167, 5, 0.142, 7, 0.272, 10, 1.002, 16, 0.775, 17, 0.026, 18, 0.775, 19, 1.974, 22, 0.932, 37, 0.509, 42, 1.657, 43, 0.167, 45, 0.98, 50, 0.01, 51, 0.015, 52, 0.01, 56, 0.678, 66, 3.926, 77, 1.049, 79, 1.049, 81, 0.425, 84, 1.519, 86, 1.405, 111, 1.298, 112, 1.298, 113, 1.888, 114, 1.888, 117, 1.298, 118, 2.03, 120, 1.298, 121, 2.038, 125, 1.298, 126, 1.298, 170, 1.167, 172, 1.413, 182, 1.298, 211, 1.823, 221, 3.356, 224, 1.511, 225, 3.657, 232, 4.023, 260, 1.823, 261, 2.41, 262, 2.03, 264, 2.03, 265, 2.03, 268, 2.03, 269, 1.401, 272, 2.605, 273, 2.03, 277, 4.344, 295, 3.48, 296, 2.953, 324, 1.823, 325, 2.03, 615, 2.651, 616, 2.307, 617, 3.356, 618, 3.356, 619, 3.356, 620, 3.969, 621, 2.307, 622, 2.729, 623, 2.729, 624, 2.729, 625, 2.729, 626, 2.729, 627, 2.729, 628, 2.729, 629, 2.729, 630, 2.729, 631, 3.969, 632, 3.969, 633, 2.729, 634, 2.729, 635, 2.729, 636, 2.729, 637, 2.729, 638, 2.605, 639, 2.307, 640, 2.729, 641, 2.729, 642, 2.729, 643, 2.729, 644, 2.729, 645, 2.729, 646, 2.729, 647, 2.729, 648, 2.729, 649, 2.729, 650, 2.729, 651, 2.729, 652, 2.729, 653, 2.729, 654, 2.729, 655, 2.729]], ["title/modules/MetaModule.html", [88, 1.133, 102, 2.049]], ["body/modules/MetaModule.html", [0, 0.014, 3, 0.225, 4, 0.225, 5, 0.192, 17, 0.026, 37, 0.544, 43, 0.225, 45, 1.321, 50, 0.014, 51, 0.018, 52, 0.014, 56, 0.486, 79, 1.879, 81, 0.573, 88, 1.843, 90, 1.627, 91, 1.627, 92, 1.89, 93, 1.89, 94, 1.627, 95, 2.819, 96, 1.89, 102, 3.8, 105, 2.51, 106, 1.89, 107, 1.89, 110, 2.235, 111, 1.75, 112, 1.75, 113, 2.325, 114, 2.325, 117, 1.75, 118, 3.636, 120, 1.75, 121, 2.51, 125, 1.75, 126, 1.75, 129, 2.458, 130, 1.414, 182, 1.75, 195, 2.049, 324, 2.458, 325, 2.738, 328, 2.968, 329, 3.112, 331, 2.738, 332, 2.738, 334, 3.112, 615, 3.666, 638, 3.484, 639, 3.112, 656, 3.112, 657, 3.112, 658, 3.68, 659, 3.68, 660, 3.68, 661, 3.68, 662, 3.68]], ["title/injectables/MetaService.html", [167, 0.612, 638, 1.878]], ["body/injectables/MetaService.html", [0, 0.01, 3, 0.168, 4, 0.168, 5, 0.144, 7, 0.274, 10, 1.069, 12, 1.672, 16, 0.754, 17, 0.026, 18, 1.201, 22, 0.994, 27, 1.936, 37, 0.357, 43, 0.168, 50, 0.015, 51, 0.015, 52, 0.01, 56, 0.723, 81, 0.429, 86, 1.328, 130, 1.058, 157, 2.32, 167, 0.725, 168, 1.058, 170, 1.175, 172, 1.419, 206, 1.579, 224, 1.611, 225, 3.579, 283, 1.672, 284, 1.672, 285, 1.672, 286, 2.256, 302, 4.075, 344, 1.414, 346, 3.378, 351, 2.426, 378, 2.048, 384, 1.533, 402, 2.328, 412, 2.237, 423, 2.328, 429, 3.378, 432, 2.328, 434, 2.328, 602, 2.328, 617, 3.378, 618, 3.378, 619, 3.378, 621, 3.378, 638, 2.224, 663, 2.328, 664, 3.995, 665, 2.753, 666, 2.753, 667, 2.753, 668, 3.995, 669, 2.753, 670, 3.995, 671, 2.753, 672, 3.995, 673, 2.753, 674, 2.753, 675, 2.753, 676, 2.753, 677, 2.753, 678, 3.995, 679, 2.753, 680, 2.753, 681, 2.753, 682, 2.753, 683, 2.753, 684, 2.753, 685, 2.753]], ["title/interfaces/Pagination.html", [240, 2.049, 312, 1.389]], ["body/interfaces/Pagination.html", [3, 0.275, 4, 0.275, 5, 0.235, 7, 0.448, 8, 1.999, 10, 1.231, 16, 0.734, 17, 0.025, 18, 1.086, 43, 0.34, 50, 0.017, 51, 0.021, 52, 0.017, 71, 3.39, 240, 3.668, 247, 2.509, 283, 3.83, 284, 3.83, 312, 2.292, 313, 2.736, 314, 3.352, 315, 3.01, 316, 3.352, 317, 3.352]], ["title/controllers/PublishController.html", [77, 1.296, 686, 2.253]], ["body/controllers/PublishController.html", [0, 0.015, 3, 0.25, 4, 0.25, 5, 0.302, 7, 0.408, 10, 0.8, 17, 0.026, 19, 1.575, 22, 0.744, 37, 0.545, 43, 0.25, 50, 0.015, 51, 0.019, 52, 0.015, 56, 0.541, 77, 1.575, 79, 1.575, 81, 0.638, 84, 2.282, 86, 1.055, 157, 2.076, 170, 1.542, 172, 1.128, 211, 2.738, 224, 1.205, 261, 2.489, 264, 3.049, 268, 3.049, 269, 2.105, 295, 3.049, 686, 3.503, 687, 3.466, 688, 4.099, 689, 5.244, 690, 4.099, 691, 4.099, 692, 4.099, 693, 4.099, 694, 4.099, 695, 4.099, 696, 3.466, 697, 3.466, 698, 3.22, 699, 3.466, 700, 4.099, 701, 4.099, 702, 4.099, 703, 4.099, 704, 4.099]], ["title/modules/PublishModule.html", [88, 1.133, 103, 2.049]], ["body/modules/PublishModule.html", [0, 0.016, 3, 0.266, 4, 0.266, 5, 0.228, 17, 0.025, 37, 0.532, 43, 0.266, 50, 0.016, 51, 0.02, 52, 0.016, 79, 2.096, 81, 0.679, 88, 1.999, 90, 1.928, 91, 1.928, 92, 2.24, 93, 2.24, 94, 1.928, 95, 3.056, 96, 2.24, 103, 3.976, 105, 2.801, 106, 2.24, 107, 2.24, 686, 3.975, 698, 3.646, 699, 3.688, 705, 3.688, 706, 3.688, 707, 4.362, 708, 4.362]], ["title/injectables/PublishService.html", [167, 0.612, 698, 1.878]], ["body/injectables/PublishService.html", [0, 0.015, 3, 0.251, 4, 0.251, 5, 0.274, 7, 0.409, 10, 0.803, 16, 0.543, 17, 0.026, 22, 0.746, 27, 1.694, 34, 1.58, 37, 0.518, 43, 0.251, 50, 0.019, 51, 0.019, 52, 0.015, 56, 0.543, 81, 0.64, 86, 1.058, 157, 2.08, 167, 0.953, 168, 1.58, 170, 1.545, 172, 1.132, 206, 1.765, 224, 1.209, 286, 1.694, 418, 1.956, 479, 3.059, 559, 3.059, 698, 2.926, 709, 3.478, 710, 5.256, 711, 5.256, 712, 4.113, 713, 3.51, 714, 3.478, 715, 3.059, 716, 4.113, 717, 4.113, 718, 4.113, 719, 4.113, 720, 4.113, 721, 4.113, 722, 4.113]], ["title/interfaces/Response.html", [312, 1.389, 551, 2.049]], ["body/interfaces/Response.html", [0, 0.015, 3, 0.252, 4, 0.252, 5, 0.215, 7, 0.411, 8, 1.891, 16, 0.544, 17, 0.026, 27, 1.699, 37, 0.519, 43, 0.252, 50, 0.015, 51, 0.02, 52, 0.015, 81, 0.642, 86, 1.355, 167, 0.955, 312, 1.699, 313, 2.506, 412, 1.963, 420, 3.834, 539, 2.756, 551, 3.198, 558, 3.07, 723, 3.07, 724, 4.905, 725, 4.454, 726, 4.454, 727, 4.454, 728, 3.489, 729, 3.489, 730, 4.454, 731, 3.07, 732, 2.756, 733, 3.489, 734, 3.489, 735, 3.489, 736, 3.489, 737, 3.489]], ["title/injectables/TransformInterceptor.html", [167, 0.612, 732, 2.253]], ["body/injectables/TransformInterceptor.html", [0, 0.015, 3, 0.241, 4, 0.241, 5, 0.206, 7, 0.393, 10, 0.771, 16, 0.522, 17, 0.026, 22, 0.717, 27, 1.628, 37, 0.508, 43, 0.241, 50, 0.015, 51, 0.019, 52, 0.015, 56, 0.522, 81, 0.615, 86, 1.319, 167, 0.929, 168, 1.519, 170, 1.507, 172, 1.088, 224, 1.163, 312, 1.628, 412, 1.88, 420, 3.111, 539, 2.641, 551, 2.401, 558, 2.941, 723, 2.941, 724, 3.343, 725, 4.333, 726, 5.085, 727, 5.085, 728, 3.343, 729, 3.343, 730, 4.807, 731, 2.941, 732, 3.422, 733, 4.807, 734, 4.333, 735, 4.807, 736, 3.343, 737, 3.343, 738, 3.953, 739, 3.953]], ["title/classes/User.html", [0, 0.013, 122, 1.133]], ["body/classes/User.html", [0, 0.014, 2, 1.677, 3, 0.232, 4, 0.232, 5, 0.198, 7, 0.378, 8, 1.791, 10, 1.232, 16, 0.811, 17, 0.026, 18, 1.301, 19, 2.363, 22, 1.115, 37, 0.339, 43, 0.305, 50, 0.014, 51, 0.019, 52, 0.014, 55, 3.384, 56, 0.735, 122, 1.675, 130, 1.458, 180, 2.822, 195, 2.777, 196, 2.822, 206, 1.274, 503, 3.722, 507, 3.384, 604, 5.637, 740, 2.822, 741, 4.712, 742, 3.794, 743, 3.794, 744, 3.794, 745, 3.794, 746, 3.794, 747, 2.534, 748, 3.208]], ["title/controllers/UserController.html", [77, 1.296, 109, 2.049]], ["body/controllers/UserController.html", [0, 0.012, 3, 0.201, 4, 0.201, 5, 0.172, 7, 0.328, 10, 0.885, 16, 0.598, 17, 0.026, 19, 1.743, 22, 0.823, 27, 1.356, 37, 0.524, 43, 0.201, 45, 1.183, 50, 0.012, 51, 0.017, 52, 0.012, 56, 0.684, 77, 1.266, 79, 1.266, 81, 0.513, 86, 1.167, 109, 2.754, 111, 1.567, 112, 1.567, 113, 2.157, 114, 2.157, 115, 1.834, 117, 1.567, 120, 1.567, 121, 1.691, 122, 1.523, 123, 2, 124, 2, 125, 1.567, 126, 1.567, 157, 1.862, 170, 1.334, 172, 1.248, 211, 2.2, 224, 1.334, 225, 3.15, 261, 2.754, 265, 2.45, 272, 2.525, 273, 2.45, 286, 1.356, 296, 3.374, 344, 1.691, 384, 2.525, 461, 2.467, 495, 2.663, 516, 2.785, 517, 2.45, 591, 2.785, 749, 2.785, 750, 3.835, 751, 4.535, 752, 3.294, 753, 4.535, 754, 3.294, 755, 4.535, 756, 3.294, 757, 3.732, 758, 3.294, 759, 3.294, 760, 3.294, 761, 3.294, 762, 3.294, 763, 3.294, 764, 2.785, 765, 3.294, 766, 3.294, 767, 3.294, 768, 3.294, 769, 3.294, 770, 3.294, 771, 3.294, 772, 3.294]], ["title/modules/UserModule.html", [88, 1.133, 104, 1.732]], ["body/modules/UserModule.html", [0, 0.013, 3, 0.216, 4, 0.216, 5, 0.185, 17, 0.026, 37, 0.537, 43, 0.216, 45, 1.272, 50, 0.013, 51, 0.018, 52, 0.013, 56, 0.629, 79, 1.361, 81, 0.551, 88, 1.808, 90, 1.566, 91, 1.566, 92, 1.819, 93, 1.819, 94, 1.566, 95, 2.765, 96, 2.765, 104, 3.248, 105, 2.447, 106, 1.819, 107, 1.819, 109, 2.893, 110, 2.151, 111, 1.685, 112, 1.685, 113, 2.266, 114, 2.266, 115, 1.972, 117, 1.685, 120, 2.266, 122, 1.6, 123, 2.151, 124, 2.151, 125, 1.685, 126, 1.685, 129, 2.366, 130, 1.361, 195, 1.972, 331, 2.635, 332, 2.635, 466, 2.995, 468, 2.995, 469, 2.995, 495, 3.435, 747, 3.182, 764, 2.995, 773, 2.995, 774, 2.995, 775, 2.995, 776, 3.542, 777, 3.542, 778, 3.542, 779, 3.542, 780, 3.542, 781, 3.542, 782, 3.542]], ["title/injectables/UserService.html", [167, 0.612, 495, 1.732]], ["body/injectables/UserService.html", [0, 0.01, 3, 0.171, 4, 0.171, 5, 0.146, 7, 0.279, 10, 0.927, 16, 0.534, 17, 0.026, 18, 0.927, 22, 0.862, 30, 1.703, 34, 1.556, 37, 0.465, 43, 0.171, 45, 1.454, 50, 0.01, 51, 0.015, 52, 0.01, 55, 2.458, 56, 0.782, 81, 0.436, 86, 1.42, 104, 2.079, 122, 1.747, 130, 1.077, 157, 1.706, 167, 0.734, 168, 1.077, 170, 1.19, 172, 1.114, 206, 1.853, 224, 1.397, 232, 2.704, 286, 1.667, 341, 3.423, 344, 1.44, 351, 3.159, 378, 2.086, 384, 1.561, 407, 3.011, 412, 1.334, 415, 2.704, 416, 2.704, 417, 2.254, 418, 1.925, 420, 1.703, 421, 2.371, 495, 2.079, 503, 3.173, 507, 2.458, 510, 3.534, 511, 2.086, 513, 1.873, 514, 2.371, 524, 2.371, 527, 3.011, 528, 3.423, 529, 3.423, 546, 2.371, 741, 2.371, 783, 2.371, 784, 4.048, 785, 2.804, 786, 2.804, 787, 4.048, 788, 2.804, 789, 4.048, 790, 2.804, 791, 4.048, 792, 2.804, 793, 3.011, 794, 2.804, 795, 2.804, 796, 2.804, 797, 2.804, 798, 2.804, 799, 4.048, 800, 2.804, 801, 2.804]], ["title/injectables/ValidationPipe.html", [167, 0.612, 272, 1.878]], ["body/injectables/ValidationPipe.html", [0, 0.021, 3, 0.199, 4, 0.199, 5, 0.17, 7, 0.324, 10, 0.878, 16, 0.594, 17, 0.026, 18, 0.636, 21, 2.177, 22, 0.817, 30, 1.979, 37, 0.497, 40, 1.814, 43, 0.199, 50, 0.012, 51, 0.017, 52, 0.012, 56, 0.594, 71, 1.673, 81, 0.507, 86, 1.327, 157, 1.852, 167, 0.817, 168, 1.252, 170, 1.324, 172, 1.239, 206, 1.868, 224, 1.324, 272, 2.506, 286, 1.342, 360, 3.837, 363, 4.343, 384, 2.872, 412, 2.453, 417, 1.814, 418, 1.55, 539, 2.177, 547, 2.756, 571, 2.424, 802, 2.756, 803, 4.502, 804, 4.502, 805, 4.502, 806, 3.259, 807, 5.838, 808, 4.502, 809, 5.563, 810, 3.259, 811, 4.502, 812, 3.259, 813, 3.259, 814, 2.756, 815, 3.259, 816, 3.259, 817, 3.259, 818, 3.807, 819, 3.259, 820, 3.259, 821, 3.259, 822, 3.259, 823, 3.259, 824, 3.259, 825, 4.502, 826, 3.259, 827, 3.259, 828, 3.259, 829, 3.259]], ["title/coverage.html", [830, 3.43]], ["body/coverage.html", [0, 0.022, 1, 1.68, 5, 0.131, 6, 2.127, 16, 0.332, 17, 0.026, 30, 4.22, 50, 0.009, 51, 0.014, 52, 0.009, 53, 1.68, 54, 2.127, 65, 3.162, 66, 1.68, 67, 2.127, 77, 2.029, 78, 1.68, 80, 2.127, 82, 1.401, 94, 1.112, 109, 1.528, 122, 1.256, 167, 1.11, 169, 2.127, 175, 1.778, 176, 2.781, 177, 1.401, 182, 1.197, 207, 1.68, 209, 1.68, 210, 2.127, 240, 1.528, 247, 1.401, 266, 1.401, 272, 1.401, 312, 2.278, 314, 2.781, 328, 1.528, 335, 2.127, 380, 1.871, 418, 1.197, 461, 1.197, 462, 1.401, 463, 1.528, 478, 1.68, 490, 2.127, 495, 1.292, 513, 1.68, 535, 2.127, 536, 1.871, 537, 2.127, 538, 2.127, 551, 1.528, 570, 2.127, 595, 2.127, 601, 2.781, 615, 1.68, 616, 2.127, 638, 1.401, 663, 2.127, 686, 1.68, 687, 2.127, 698, 1.401, 709, 2.127, 715, 1.871, 723, 2.781, 732, 1.68, 740, 2.781, 747, 1.68, 749, 2.127, 757, 1.68, 783, 2.127, 793, 1.871, 802, 2.127, 830, 1.871, 831, 2.516, 832, 2.516, 833, 2.516, 834, 4.464, 835, 6.013, 836, 2.127, 837, 6.286, 838, 2.127, 839, 2.127, 840, 5.532, 841, 2.516, 842, 5.532, 843, 3.739, 844, 5.532, 845, 2.516, 846, 2.127, 847, 4.94, 848, 2.516, 849, 2.127, 850, 2.516, 851, 4.94, 852, 2.127, 853, 2.127, 854, 2.127, 855, 2.516, 856, 2.516, 857, 3.162, 858, 3.739, 859, 2.516, 860, 2.516]], ["title/dependencies.html", [91, 1.794, 861, 2.815]], ["body/dependencies.html", [0, 0.019, 17, 0.026, 40, 2.223, 42, 2.424, 50, 0.015, 51, 0.019, 52, 0.015, 81, 0.621, 91, 1.765, 130, 1.534, 138, 3.376, 197, 2.97, 269, 2.05, 477, 2.97, 482, 2.666, 578, 4.248, 599, 3.376, 696, 3.376, 697, 4.36, 713, 2.666, 714, 3.376, 731, 2.97, 814, 3.376, 862, 3.992, 863, 3.992, 864, 5.711, 865, 3.992, 866, 3.992, 867, 5.156, 868, 3.992, 869, 3.992, 870, 3.992, 871, 3.992, 872, 3.992, 873, 3.992, 874, 3.992, 875, 3.992, 876, 3.992, 877, 3.992, 878, 3.992, 879, 3.992, 880, 3.992, 881, 3.992, 882, 3.992, 883, 3.992, 884, 3.992, 885, 3.992, 886, 3.992, 887, 3.992, 888, 3.992, 889, 3.992, 890, 3.992, 891, 3.992, 892, 3.992, 893, 3.992]], ["title/miscellaneous/functions.html", [894, 1.88, 895, 3.433]], ["body/miscellaneous/functions.html", [7, 0.457, 10, 0.896, 17, 0.025, 18, 1.099, 45, 1.648, 50, 0.017, 51, 0.021, 52, 0.017, 56, 0.606, 94, 2.692, 172, 1.549, 224, 1.35, 380, 4.53, 503, 4.067, 513, 3.76, 793, 4.53, 846, 3.882, 849, 3.882, 857, 3.882, 894, 3.066, 895, 3.882, 896, 4.591, 897, 5.63, 898, 4.591, 899, 4.591, 900, 4.591, 901, 4.761, 902, 4.591]], ["title/index.html", [7, 0.28, 903, 2.815, 904, 2.815]], ["body/index.html", [17, 0.026, 50, 0.013, 51, 0.018, 52, 0.013, 122, 1.179, 175, 1.67, 182, 2.937, 217, 2.612, 232, 3.164, 260, 2.345, 261, 3.639, 262, 2.612, 713, 3.164, 750, 2.969, 830, 2.612, 905, 3.511, 906, 3.511, 907, 3.511, 908, 3.511, 909, 3.511, 910, 3.511, 911, 4.737, 912, 3.511, 913, 4.737, 914, 3.511, 915, 3.511, 916, 5.361, 917, 4.737, 918, 5.361, 919, 4.737, 920, 3.511, 921, 3.511, 922, 6.311, 923, 3.511, 924, 6.174, 925, 3.511, 926, 4.737, 927, 3.511, 928, 3.511, 929, 3.511, 930, 4.737, 931, 3.511, 932, 3.511, 933, 3.511]], ["title/modules.html", [90, 2.038]], ["body/modules.html", [17, 0.021, 50, 0.018, 51, 0.021, 52, 0.018, 89, 3.198, 90, 2.117, 100, 2.908, 101, 2.908, 102, 2.908, 103, 2.908, 104, 2.459, 934, 6.697, 935, 6.697, 936, 6.697, 937, 6.697]], ["title/overview.html", [938, 3.898]], ["body/overview.html", [2, 1.513, 17, 0.025, 50, 0.013, 51, 0.017, 52, 0.013, 79, 1.315, 82, 2.946, 88, 1.149, 89, 4.499, 90, 1.513, 91, 1.513, 92, 1.758, 93, 1.758, 94, 1.513, 95, 1.758, 96, 1.758, 97, 2.894, 98, 2.894, 99, 2.894, 100, 3.607, 101, 4.04, 102, 3.607, 103, 3.607, 104, 3.219, 105, 2.391, 106, 1.758, 107, 1.758, 168, 1.315, 266, 2.946, 285, 2.079, 313, 2.079, 318, 2.894, 319, 2.894, 457, 2.894, 458, 2.894, 460, 2.894, 461, 2.982, 462, 2.946, 463, 3.213, 495, 3.219, 568, 2.894, 638, 2.946, 656, 2.894, 657, 2.894, 698, 2.946, 705, 2.894, 706, 2.894, 773, 2.894, 774, 2.894, 775, 2.894, 938, 2.894, 939, 4.656, 940, 2.894]], ["title/classes/userDTO.html", [0, 0.013, 757, 2.253]], ["body/classes/userDTO.html", [0, 0.018, 2, 1.662, 3, 0.23, 4, 0.23, 5, 0.196, 7, 0.374, 8, 1.78, 9, 3.346, 16, 0.732, 17, 0.026, 18, 1.271, 19, 2.132, 22, 1.006, 33, 3.179, 34, 2.504, 37, 0.336, 39, 2.796, 40, 2.093, 43, 0.23, 46, 2.283, 47, 2.283, 50, 0.014, 51, 0.018, 52, 0.014, 55, 3.368, 56, 0.732, 64, 4.691, 285, 3.581, 507, 3.368, 757, 3.311, 854, 3.179, 940, 4.192, 941, 3.759, 942, 5.898, 943, 3.759, 944, 3.759, 945, 3.759, 946, 3.759, 947, 3.759, 948, 3.759]], ["title/miscellaneous/variables.html", [894, 1.88, 949, 3.433]], ["body/miscellaneous/variables.html", [7, 0.343, 16, 0.81, 17, 0.026, 28, 4.325, 50, 0.013, 51, 0.017, 52, 0.013, 121, 2.4, 163, 2.911, 164, 3.952, 176, 2.561, 207, 3.122, 208, 2.911, 328, 2.838, 363, 4.817, 478, 3.122, 484, 3.952, 559, 3.477, 601, 2.561, 614, 2.911, 713, 2.299, 715, 3.477, 740, 2.561, 747, 3.122, 748, 2.911, 818, 5.19, 834, 2.911, 836, 3.952, 838, 3.952, 839, 3.952, 852, 2.911, 853, 3.952, 894, 2.299, 901, 3.952, 949, 2.911, 950, 3.442, 951, 5.952, 952, 3.442, 953, 3.442, 954, 3.442, 955, 3.442, 956, 3.442, 957, 4.674, 958, 3.442, 959, 3.442, 960, 3.442, 961, 3.442, 962, 3.442, 963, 3.442, 964, 3.442, 965, 3.442, 966, 3.442, 967, 3.442, 968, 3.442, 969, 3.442, 970, 3.442, 971, 3.442, 972, 3.442, 973, 3.442]]], "invertedIndex": [["", { "_index": 17, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "classes/Article.html": {}, "controllers/ArticleController.html": {}, "interfaces/ArticleList.html": {}, "modules/ArticleModule.html": {}, "injectables/ArticleService.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "interfaces/Comment.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "classes/Meta.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "injectables/MetaService.html": {}, "interfaces/Pagination.html": {}, "controllers/PublishController.html": {}, "modules/PublishModule.html": {}, "injectables/PublishService.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "classes/User.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "coverage.html": {}, "dependencies.html": {}, "miscellaneous/functions.html": {}, "index.html": {}, "modules.html": {}, "overview.html": {}, "classes/userDTO.html": {}, "miscellaneous/variables.html": {} } }], ["0", { "_index": 30, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "coverage.html": {} } }], ["0.1.13", { "_index": 887, "title": {}, "body": { "dependencies.html": {} } }], ["0.12.2", { "_index": 872, "title": {}, "body": { "dependencies.html": {} } }], ["0.3.1", { "_index": 871, "title": {}, "body": { "dependencies.html": {} } }], ["0.4.1", { "_index": 882, "title": {}, "body": { "dependencies.html": {} } }], ["0.6.1", { "_index": 865, "title": {}, "body": { "dependencies.html": {} } }], ["0/1", { "_index": 837, "title": {}, "body": { "coverage.html": {} } }], ["0/10", { "_index": 848, "title": {}, "body": { "coverage.html": {} } }], ["0/11", { "_index": 855, "title": {}, "body": { "coverage.html": {} } }], ["0/12", { "_index": 850, "title": {}, "body": { "coverage.html": {} } }], ["0/2", { "_index": 840, "title": {}, "body": { "coverage.html": {} } }], ["0/3", { "_index": 844, "title": {}, "body": { "coverage.html": {} } }], ["0/4", { "_index": 851, "title": {}, "body": { "coverage.html": {} } }], ["0/5", { "_index": 843, "title": {}, "body": { "coverage.html": {} } }], ["0/6", { "_index": 842, "title": {}, "body": { "coverage.html": {} } }], ["0/7", { "_index": 856, "title": {}, "body": { "coverage.html": {} } }], ["01", { "_index": 114, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/ArticleController.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {} } }], ["01:21:03", { "_index": 778, "title": {}, "body": { "modules/UserModule.html": {} } }], ["02", { "_index": 115, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/ArticleController.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {} } }], ["02:24:13", { "_index": 762, "title": {}, "body": { "controllers/UserController.html": {} } }], ["03", { "_index": 466, "title": {}, "body": { "modules/AuthModule.html": {}, "modules/UserModule.html": {} } }], ["04", { "_index": 118, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {} } }], ["06", { "_index": 761, "title": {}, "body": { "controllers/UserController.html": {} } }], ["07", { "_index": 257, "title": {}, "body": { "controllers/ArticleController.html": {}, "modules/ArticleModule.html": {} } }], ["1", { "_index": 27, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "controllers/ArticleController.html": {}, "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "injectables/MetaService.html": {}, "injectables/PublishService.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "controllers/UserController.html": {} } }], ["1.0.0", { "_index": 884, "title": {}, "body": { "dependencies.html": {} } }], ["1.25.0", { "_index": 880, "title": {}, "body": { "dependencies.html": {} } }], ["1.7.4", { "_index": 874, "title": {}, "body": { "dependencies.html": {} } }], ["1/1", { "_index": 858, "title": {}, "body": { "coverage.html": {} } }], ["10", { "_index": 285, "title": {}, "body": { "controllers/ArticleController.html": {}, "injectables/ArticleService.html": {}, "injectables/MetaService.html": {}, "overview.html": {}, "classes/userDTO.html": {} } }], ["100", { "_index": 65, "title": {}, "body": { "classes/AddCommentDTO.html": {}, "coverage.html": {} } }], ["100字限制了'})@apiproperty({description", { "_index": 58, "title": {}, "body": { "classes/AddCommentDTO.html": {} } }], ["10:59:57", { "_index": 116, "title": {}, "body": { "modules/AppModule.html": {} } }], ["123456", { "_index": 962, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["12:04:38", { "_index": 321, "title": {}, "body": { "modules/ArticleModule.html": {} } }], ["12:05:04", { "_index": 256, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["14:53:41", { "_index": 119, "title": {}, "body": { "modules/AppModule.html": {} } }], ["15:01:35", { "_index": 636, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["15:02:43", { "_index": 777, "title": {}, "body": { "modules/UserModule.html": {} } }], ["15:03:02", { "_index": 760, "title": {}, "body": { "controllers/UserController.html": {} } }], ["16:49:47", { "_index": 659, "title": {}, "body": { "modules/MetaModule.html": {} } }], ["16:54:00", { "_index": 634, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["17", { "_index": 635, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["17.1.1", { "_index": 863, "title": {}, "body": { "dependencies.html": {} } }], ["17:54:34", { "_index": 258, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["18:00:01", { "_index": 322, "title": {}, "body": { "modules/ArticleModule.html": {} } }], ["19:18:50", { "_index": 467, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["1是tag，2是category", { "_index": 613, "title": {}, "body": { "classes/Meta.html": {} } }], ["2", { "_index": 76, "title": {}, "body": { "classes/AddMetaDTO.html": {}, "injectables/AuthService.html": {} } }], ["20", { "_index": 44, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "injectables/ArticleService.html": {} } }], ["20'})@apiproperty({description", { "_index": 35, "title": {}, "body": { "classes/AddArticleDTO.html": {} } }], ["2021", { "_index": 113, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/ArticleController.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {} } }], ["22:02:39", { "_index": 660, "title": {}, "body": { "modules/MetaModule.html": {} } }], ["23:03:44", { "_index": 465, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["3", { "_index": 533, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["3.0.2", { "_index": 889, "title": {}, "body": { "dependencies.html": {} } }], ["3000", { "_index": 163, "title": {}, "body": { "modules/AppModule.html": {}, "miscellaneous/variables.html": {} } }], ["30d", { "_index": 488, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["4", { "_index": 588, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["4.0.0", { "_index": 883, "title": {}, "body": { "dependencies.html": {} } }], ["4.1.6", { "_index": 893, "title": {}, "body": { "dependencies.html": {} } }], ["4.17.20", { "_index": 878, "title": {}, "body": { "dependencies.html": {} } }], ["4.3.1", { "_index": 876, "title": {}, "body": { "dependencies.html": {} } }], ["4.7.9", { "_index": 869, "title": {}, "body": { "dependencies.html": {} } }], ["403", { "_index": 529, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/UserService.html": {} } }], ["5", { "_index": 940, "title": {}, "body": { "overview.html": {}, "classes/userDTO.html": {} } }], ["5.11.9", { "_index": 881, "title": {}, "body": { "dependencies.html": {} } }], ["5位'})@maxlength(10", { "_index": 945, "title": {}, "body": { "classes/userDTO.html": {} } }], ["5位'})@maxlength(20", { "_index": 943, "title": {}, "body": { "classes/userDTO.html": {} } }], ["6", { "_index": 939, "title": {}, "body": { "overview.html": {} } }], ["6.12.0", { "_index": 870, "title": {}, "body": { "dependencies.html": {} } }], ["6.6.3", { "_index": 890, "title": {}, "body": { "dependencies.html": {} } }], ["7.1.5", { "_index": 868, "title": {}, "body": { "dependencies.html": {} } }], ["7.2.0", { "_index": 867, "title": {}, "body": { "dependencies.html": {} } }], ["7.5.1", { "_index": 864, "title": {}, "body": { "dependencies.html": {} } }], ["8", { "_index": 568, "title": {}, "body": { "classes/HttpExceptionFilter.html": {}, "overview.html": {} } }], ["99360774@qq.com", { "_index": 61, "title": {}, "body": { "classes/AddCommentDTO.html": {} } }], ["_id", { "_index": 302, "title": {}, "body": { "controllers/ArticleController.html": {}, "injectables/ArticleService.html": {}, "injectables/MetaService.html": {} } }], ["a.add_time", { "_index": 451, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["a.year", { "_index": 456, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["accesskeyid", { "_index": 964, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["accesskeysecret", { "_index": 966, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["add_time", { "_index": 46, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/Article.html": {}, "injectables/ArticleService.html": {}, "classes/userDTO.html": {} } }], ["addarticle", { "_index": 212, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["addarticle(@body", { "_index": 297, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["addarticle(body", { "_index": 220, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["addarticledto", { "_index": 1, "title": { "classes/AddArticleDTO.html": {} }, "body": { "classes/AddArticleDTO.html": {}, "controllers/ArticleController.html": {}, "coverage.html": {} } }], ["addcomment", { "_index": 336, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["addcomment(id", { "_index": 349, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["addcommentdto", { "_index": 53, "title": { "classes/AddCommentDTO.html": {} }, "body": { "classes/AddCommentDTO.html": {}, "controllers/ArticleController.html": {}, "coverage.html": {} } }], ["adddata", { "_index": 337, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["adddata(params", { "_index": 352, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["addmeta", { "_index": 617, "title": {}, "body": { "controllers/MetaController.html": {}, "injectables/MetaService.html": {} } }], ["addmeta(@body", { "_index": 644, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["addmeta(body", { "_index": 621, "title": {}, "body": { "controllers/MetaController.html": {}, "injectables/MetaService.html": {} } }], ["addmetadto", { "_index": 66, "title": { "classes/AddMetaDTO.html": {} }, "body": { "classes/AddMetaDTO.html": {}, "controllers/MetaController.html": {}, "coverage.html": {} } }], ["admin", { "_index": 961, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["ali", { "_index": 714, "title": {}, "body": { "injectables/PublishService.html": {}, "dependencies.html": {} } }], ["alias", { "_index": 68, "title": {}, "body": { "classes/AddMetaDTO.html": {}, "classes/Meta.html": {} } }], ["api", { "_index": 911, "title": {}, "body": { "index.html": {} } }], ["apibearerauth", { "_index": 277, "title": {}, "body": { "controllers/ArticleController.html": {}, "controllers/MetaController.html": {} } }], ["apibody", { "_index": 276, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["apiparam", { "_index": 278, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["apiproperty", { "_index": 41, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {} } }], ["apiproperty({description", { "_index": 25, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {} } }], ["apiproperty({type", { "_index": 20, "title": {}, "body": { "classes/AddArticleDTO.html": {} } }], ["api地址：http://api.forpad.netto", { "_index": 908, "title": {}, "body": { "index.html": {} } }], ["app.config", { "_index": 479, "title": {}, "body": { "modules/AuthModule.html": {}, "injectables/JwtStrategy.html": {}, "injectables/PublishService.html": {} } }], ["app.controller", { "_index": 128, "title": {}, "body": { "modules/AppModule.html": {} } }], ["app.service", { "_index": 83, "title": {}, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {} } }], ["appcontroller", { "_index": 78, "title": { "controllers/AppController.html": {} }, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {}, "coverage.html": {} } }], ["application/json", { "_index": 566, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["appmodule", { "_index": 89, "title": { "modules/AppModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules.html": {}, "overview.html": {} } }], ["appservice", { "_index": 82, "title": { "injectables/AppService.html": {} }, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "coverage.html": {}, "overview.html": {} } }], ["archive", { "_index": 338, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["argumentmetadata", { "_index": 809, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["argumentshost", { "_index": 543, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["array", { "_index": 828, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["arraynotempty", { "_index": 203, "title": {}, "body": { "classes/Article.html": {} } }], ["arrayunique", { "_index": 49, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/Article.html": {} } }], ["article", { "_index": 175, "title": { "classes/Article.html": {} }, "body": { "classes/Article.html": {}, "controllers/ArticleController.html": {}, "modules/ArticleModule.html": {}, "injectables/ArticleService.html": {}, "classes/Meta.html": {}, "coverage.html": {}, "index.html": {} } }], ["article.controller", { "_index": 326, "title": {}, "body": { "modules/ArticleModule.html": {} } }], ["article.dto", { "_index": 274, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["article.model", { "_index": 381, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["article.schema", { "_index": 612, "title": {}, "body": { "classes/Meta.html": {} } }], ["article.service", { "_index": 267, "title": {}, "body": { "controllers/ArticleController.html": {}, "modules/ArticleModule.html": {} } }], ["article/:id/comment", { "_index": 920, "title": {}, "body": { "index.html": {} } }], ["article_list", { "_index": 602, "title": {}, "body": { "classes/Meta.html": {}, "injectables/MetaService.html": {} } }], ["articlecontroller", { "_index": 209, "title": { "controllers/ArticleController.html": {} }, "body": { "controllers/ArticleController.html": {}, "modules/ArticleModule.html": {}, "coverage.html": {} } }], ["articledata", { "_index": 414, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["articlelist", { "_index": 247, "title": { "interfaces/ArticleList.html": {} }, "body": { "controllers/ArticleController.html": {}, "interfaces/ArticleList.html": {}, "injectables/ArticleService.html": {}, "interfaces/Pagination.html": {}, "coverage.html": {} } }], ["articlelist(@param", { "_index": 653, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["articlemodel", { "_index": 348, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["articlemodule", { "_index": 100, "title": { "modules/ArticleModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/ArticleModule.html": {}, "modules.html": {}, "overview.html": {} } }], ["articles", { "_index": 333, "title": {}, "body": { "modules/ArticleModule.html": {} } }], ["articleschema", { "_index": 207, "title": {}, "body": { "classes/Article.html": {}, "modules/ArticleModule.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["articleservice", { "_index": 266, "title": { "injectables/ArticleService.html": {} }, "body": { "controllers/ArticleController.html": {}, "modules/ArticleModule.html": {}, "injectables/ArticleService.html": {}, "coverage.html": {}, "overview.html": {} } }], ["async", { "_index": 157, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/ArticleController.html": {}, "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "injectables/MetaService.html": {}, "controllers/PublishController.html": {}, "injectables/PublishService.html": {}, "controllers/UserController.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {} } }], ["auth", { "_index": 918, "title": {}, "body": { "index.html": {} } }], ["auth.service", { "_index": 471, "title": {}, "body": { "modules/AuthModule.html": {}, "injectables/LocalStrategy.html": {} } }], ["auth.service.js", { "_index": 581, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["auth/auth.service", { "_index": 765, "title": {}, "body": { "controllers/UserController.html": {} } }], ["authguard", { "_index": 268, "title": {}, "body": { "controllers/ArticleController.html": {}, "controllers/MetaController.html": {}, "controllers/PublishController.html": {} } }], ["authmodule", { "_index": 101, "title": { "modules/AuthModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules.html": {}, "overview.html": {} } }], ["author", { "_index": 111, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/ArticleController.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {} } }], ["author_id", { "_index": 199, "title": {}, "body": { "classes/Article.html": {} } }], ["authservice", { "_index": 461, "title": { "injectables/AuthService.html": {} }, "body": { "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "controllers/UserController.html": {}, "coverage.html": {}, "overview.html": {} } }], ["auth的接口表示需要token认证,token默认有效期为30", { "_index": 914, "title": {}, "body": { "index.html": {} } }], ["await", { "_index": 286, "title": {}, "body": { "controllers/ArticleController.html": {}, "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "injectables/MetaService.html": {}, "injectables/PublishService.html": {}, "controllers/UserController.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {} } }], ["b", { "_index": 449, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["b.add_time", { "_index": 450, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["b.year", { "_index": 455, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["badrequestexception", { "_index": 812, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["badrequestexception(`validation", { "_index": 826, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["blog/src/app.module.ts", { "_index": 127, "title": {}, "body": { "modules/AppModule.html": {} } }], ["blog/src/module/article/article.controller.ts", { "_index": 259, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["blog/src/module/article/article.module.ts", { "_index": 323, "title": {}, "body": { "modules/ArticleModule.html": {} } }], ["blog/src/module/auth/auth.module.ts", { "_index": 470, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["blog/src/module/meta/meta.controller.ts", { "_index": 637, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["blog/src/module/meta/meta.module.ts", { "_index": 661, "title": {}, "body": { "modules/MetaModule.html": {} } }], ["blog/src/module/user/user.controller.ts", { "_index": 763, "title": {}, "body": { "controllers/UserController.html": {} } }], ["blog/src/module/user/user.module.ts", { "_index": 779, "title": {}, "body": { "modules/UserModule.html": {} } }], ["body", { "_index": 225, "title": {}, "body": { "controllers/ArticleController.html": {}, "injectables/ArticleService.html": {}, "controllers/MetaController.html": {}, "injectables/MetaService.html": {}, "controllers/UserController.html": {} } }], ["body(article:article", { "_index": 917, "title": {}, "body": { "index.html": {} } }], ["body({name:string,passwd:string", { "_index": 919, "title": {}, "body": { "index.html": {} } }], ["boolean", { "_index": 360, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "injectables/ValidationPipe.html": {} } }], ["bootstrap", { "_index": 94, "title": {}, "body": { "modules/AppModule.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "modules/MetaModule.html": {}, "modules/PublishModule.html": {}, "modules/UserModule.html": {}, "coverage.html": {}, "miscellaneous/functions.html": {}, "overview.html": {} } }], ["browse", { "_index": 937, "title": {}, "body": { "modules.html": {} } }], ["browser", { "_index": 934, "title": {}, "body": { "modules.html": {} } }], ["bucket", { "_index": 968, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["callhandler", { "_index": 726, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["catch", { "_index": 415, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/UserService.html": {} } }], ["catch(exception", { "_index": 541, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["catch(httpexception", { "_index": 548, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["category", { "_index": 204, "title": {}, "body": { "classes/Article.html": {} } }], ["category_id", { "_index": 11, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/Article.html": {}, "injectables/ArticleService.html": {} } }], ["categoryid", { "_index": 316, "title": {}, "body": { "interfaces/ArticleList.html": {}, "injectables/ArticleService.html": {}, "interfaces/Pagination.html": {} } }], ["certificate", { "_index": 491, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["certificate(params", { "_index": 499, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["changemeta", { "_index": 618, "title": {}, "body": { "controllers/MetaController.html": {}, "injectables/MetaService.html": {} } }], ["changemeta(@param", { "_index": 650, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["changemeta(_id", { "_index": 668, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["changemeta(param", { "_index": 624, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["charset=utf", { "_index": 567, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["class", { "_index": 0, "title": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "classes/Article.html": {}, "classes/HttpExceptionFilter.html": {}, "classes/Meta.html": {}, "classes/User.html": {}, "classes/userDTO.html": {} }, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "classes/Article.html": {}, "controllers/ArticleController.html": {}, "modules/ArticleModule.html": {}, "injectables/ArticleService.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "classes/Meta.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "injectables/MetaService.html": {}, "controllers/PublishController.html": {}, "modules/PublishModule.html": {}, "injectables/PublishService.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "classes/User.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "coverage.html": {}, "dependencies.html": {}, "classes/userDTO.html": {} } }], ["classes", { "_index": 2, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "classes/Article.html": {}, "classes/HttpExceptionFilter.html": {}, "classes/Meta.html": {}, "classes/User.html": {}, "overview.html": {}, "classes/userDTO.html": {} } }], ["client", { "_index": 716, "title": {}, "body": { "injectables/PublishService.html": {} } }], ["client.put", { "_index": 718, "title": {}, "body": { "injectables/PublishService.html": {} } }], ["cluster_appmodule", { "_index": 97, "title": {}, "body": { "modules/AppModule.html": {}, "overview.html": {} } }], ["cluster_appmodule_imports", { "_index": 99, "title": {}, "body": { "modules/AppModule.html": {}, "overview.html": {} } }], ["cluster_appmodule_providers", { "_index": 98, "title": {}, "body": { "modules/AppModule.html": {}, "overview.html": {} } }], ["cluster_articlemodule", { "_index": 318, "title": {}, "body": { "modules/ArticleModule.html": {}, "overview.html": {} } }], ["cluster_articlemodule_providers", { "_index": 319, "title": {}, "body": { "modules/ArticleModule.html": {}, "overview.html": {} } }], ["cluster_authmodule", { "_index": 457, "title": {}, "body": { "modules/AuthModule.html": {}, "overview.html": {} } }], ["cluster_authmodule_exports", { "_index": 460, "title": {}, "body": { "modules/AuthModule.html": {}, "overview.html": {} } }], ["cluster_authmodule_imports", { "_index": 459, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["cluster_authmodule_providers", { "_index": 458, "title": {}, "body": { "modules/AuthModule.html": {}, "overview.html": {} } }], ["cluster_metamodule", { "_index": 656, "title": {}, "body": { "modules/MetaModule.html": {}, "overview.html": {} } }], ["cluster_metamodule_providers", { "_index": 657, "title": {}, "body": { "modules/MetaModule.html": {}, "overview.html": {} } }], ["cluster_publishmodule", { "_index": 705, "title": {}, "body": { "modules/PublishModule.html": {}, "overview.html": {} } }], ["cluster_publishmodule_providers", { "_index": 706, "title": {}, "body": { "modules/PublishModule.html": {}, "overview.html": {} } }], ["cluster_usermodule", { "_index": 773, "title": {}, "body": { "modules/UserModule.html": {}, "overview.html": {} } }], ["cluster_usermodule_exports", { "_index": 775, "title": {}, "body": { "modules/UserModule.html": {}, "overview.html": {} } }], ["cluster_usermodule_providers", { "_index": 774, "title": {}, "body": { "modules/UserModule.html": {}, "overview.html": {} } }], ["cn", { "_index": 971, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["code", { "_index": 558, "title": {}, "body": { "classes/HttpExceptionFilter.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["collection", { "_index": 332, "title": {}, "body": { "modules/ArticleModule.html": {}, "modules/MetaModule.html": {}, "modules/UserModule.html": {} } }], ["comment", { "_index": 177, "title": { "interfaces/Comment.html": {} }, "body": { "classes/Article.html": {}, "controllers/ArticleController.html": {}, "injectables/ArticleService.html": {}, "interfaces/Comment.html": {}, "coverage.html": {} } }], ["comment(@param", { "_index": 308, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["comment(param", { "_index": 226, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["comment.dto", { "_index": 275, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["compression", { "_index": 873, "title": {}, "body": { "dependencies.html": {} } }], ["config/configuration", { "_index": 140, "title": {}, "body": { "modules/AppModule.html": {} } }], ["config_g", { "_index": 836, "title": {}, "body": { "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["configmodule", { "_index": 137, "title": {}, "body": { "modules/AppModule.html": {} } }], ["configmodule.forroot", { "_index": 141, "title": {}, "body": { "modules/AppModule.html": {} } }], ["configservice", { "_index": 158, "title": {}, "body": { "modules/AppModule.html": {} } }], ["configservice.get('database_url", { "_index": 165, "title": {}, "body": { "modules/AppModule.html": {} } }], ["configuration", { "_index": 139, "title": {}, "body": { "modules/AppModule.html": {} } }], ["console.log('jwt", { "_index": 516, "title": {}, "body": { "injectables/AuthService.html": {}, "controllers/UserController.html": {} } }], ["console.log(1", { "_index": 654, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["console.log(11", { "_index": 589, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["console.log(22", { "_index": 427, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["console.log(_id", { "_index": 682, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["console.log(`value", { "_index": 816, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["console.log(configservice.get('database_url", { "_index": 159, "title": {}, "body": { "modules/AppModule.html": {} } }], ["console.log(configuration", { "_index": 162, "title": {}, "body": { "modules/AppModule.html": {} } }], ["console.log(data", { "_index": 421, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/UserService.html": {} } }], ["console.log(payload", { "_index": 590, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["console.log(process.env.database_url", { "_index": 160, "title": {}, "body": { "modules/AppModule.html": {} } }], ["console.log(queryinfo", { "_index": 282, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["console.log(res", { "_index": 434, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/MetaService.html": {} } }], ["console.log(result", { "_index": 429, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/MetaService.html": {} } }], ["console.log(user", { "_index": 594, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["const", { "_index": 206, "title": {}, "body": { "classes/Article.html": {}, "controllers/ArticleController.html": {}, "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "classes/Meta.html": {}, "injectables/MetaService.html": {}, "injectables/PublishService.html": {}, "classes/User.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {} } }], ["constructor", { "_index": 344, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "injectables/MetaService.html": {}, "controllers/UserController.html": {}, "injectables/UserService.html": {} } }], ["constructor(@injectmodel('meta", { "_index": 674, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["constructor(@injectmodel('user", { "_index": 794, "title": {}, "body": { "injectables/UserService.html": {} } }], ["constructor(articlemodel", { "_index": 345, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["constructor(authservice", { "_index": 572, "title": {}, "body": { "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {} } }], ["constructor(metamodel", { "_index": 665, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["constructor(private", { "_index": 84, "title": {}, "body": { "controllers/AppController.html": {}, "controllers/ArticleController.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MetaController.html": {}, "controllers/PublishController.html": {} } }], ["constructor(usermodule", { "_index": 785, "title": {}, "body": { "injectables/UserService.html": {} } }], ["constructor(usersservice", { "_index": 494, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["content", { "_index": 12, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/Article.html": {}, "injectables/ArticleService.html": {}, "injectables/MetaService.html": {} } }], ["context", { "_index": 734, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["controller", { "_index": 77, "title": { "controllers/AppController.html": {}, "controllers/ArticleController.html": {}, "controllers/MetaController.html": {}, "controllers/PublishController.html": {}, "controllers/UserController.html": {} }, "body": { "controllers/AppController.html": {}, "controllers/ArticleController.html": {}, "controllers/MetaController.html": {}, "controllers/PublishController.html": {}, "controllers/UserController.html": {}, "coverage.html": {} } }], ["controller('article", { "_index": 280, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["controller('meta", { "_index": 641, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["controller('publish", { "_index": 700, "title": {}, "body": { "controllers/PublishController.html": {} } }], ["controller('user", { "_index": 767, "title": {}, "body": { "controllers/UserController.html": {} } }], ["controllers", { "_index": 79, "title": {}, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {}, "controllers/ArticleController.html": {}, "modules/ArticleModule.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "controllers/PublishController.html": {}, "modules/PublishModule.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {}, "overview.html": {} } }], ["coverage", { "_index": 830, "title": { "coverage.html": {} }, "body": { "coverage.html": {}, "index.html": {} } }], ["create_time", { "_index": 741, "title": {}, "body": { "classes/User.html": {}, "injectables/UserService.html": {} } }], ["ctx", { "_index": 549, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["ctx.getrequest", { "_index": 554, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["ctx.getresponse", { "_index": 552, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["data", { "_index": 420, "title": {}, "body": { "injectables/ArticleService.html": {}, "classes/HttpExceptionFilter.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "injectables/UserService.html": {} } }], ["date", { "_index": 112, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/ArticleController.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {} } }], ["date.now", { "_index": 426, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["date.now().tostring", { "_index": 800, "title": {}, "body": { "injectables/UserService.html": {} } }], ["date.now()}.${file.originalname.split('.').slice", { "_index": 719, "title": {}, "body": { "injectables/PublishService.html": {} } }], ["dayjs", { "_index": 382, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["dayjs(+item.add_time).year", { "_index": 441, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["declarations", { "_index": 93, "title": {}, "body": { "modules/AppModule.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "modules/MetaModule.html": {}, "modules/PublishModule.html": {}, "modules/UserModule.html": {}, "overview.html": {} } }], ["decorators", { "_index": 19, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "classes/Article.html": {}, "controllers/ArticleController.html": {}, "classes/Meta.html": {}, "controllers/MetaController.html": {}, "controllers/PublishController.html": {}, "classes/User.html": {}, "controllers/UserController.html": {}, "classes/userDTO.html": {} } }], ["default", { "_index": 28, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "injectables/ArticleService.html": {}, "miscellaneous/variables.html": {} } }], ["defaultstrategy", { "_index": 481, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["defined", { "_index": 22, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "injectables/AppService.html": {}, "classes/Article.html": {}, "controllers/ArticleController.html": {}, "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "classes/Meta.html": {}, "controllers/MetaController.html": {}, "injectables/MetaService.html": {}, "controllers/PublishController.html": {}, "injectables/PublishService.html": {}, "injectables/TransformInterceptor.html": {}, "classes/User.html": {}, "controllers/UserController.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "classes/userDTO.html": {} } }], ["delete", { "_index": 260, "title": {}, "body": { "controllers/ArticleController.html": {}, "injectables/ArticleService.html": {}, "controllers/MetaController.html": {}, "index.html": {} } }], ["delete(':_id", { "_index": 646, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["delete(':id", { "_index": 304, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["deletearticle", { "_index": 213, "title": {}, "body": { "controllers/ArticleController.html": {}, "injectables/ArticleService.html": {} } }], ["deletearticle(@param", { "_index": 305, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["deletearticle(id", { "_index": 356, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["deletearticle(param", { "_index": 233, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["deletemeta", { "_index": 619, "title": {}, "body": { "controllers/MetaController.html": {}, "injectables/MetaService.html": {} } }], ["deletemeta(@param", { "_index": 647, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["deletemeta(_id", { "_index": 670, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["deletemeta(param", { "_index": 627, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["dependencies", { "_index": 91, "title": { "dependencies.html": {} }, "body": { "modules/AppModule.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "modules/MetaModule.html": {}, "modules/PublishModule.html": {}, "modules/UserModule.html": {}, "dependencies.html": {}, "overview.html": {} } }], ["desc", { "_index": 13, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/Article.html": {}, "classes/Meta.html": {} } }], ["description", { "_index": 45, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "modules/AppModule.html": {}, "controllers/ArticleController.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "miscellaneous/functions.html": {} } }], ["docker虚拟化的nodejs+mongodb+pm2", { "_index": 907, "title": {}, "body": { "index.html": {} } }], ["document", { "_index": 912, "title": {}, "body": { "index.html": {} } }], ["documentation", { "_index": 831, "title": {}, "body": { "coverage.html": {} } }], ["edit", { "_index": 124, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/ArticleController.html": {}, "modules/AuthModule.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {} } }], ["elemmatch", { "_index": 397, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["email", { "_index": 55, "title": {}, "body": { "classes/AddCommentDTO.html": {}, "interfaces/Comment.html": {}, "classes/User.html": {}, "injectables/UserService.html": {}, "classes/userDTO.html": {} } }], ["encrypt", { "_index": 900, "title": {}, "body": { "miscellaneous/functions.html": {} } }], ["encryptionpassword", { "_index": 505, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["encryptpassword", { "_index": 513, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/UserService.html": {}, "coverage.html": {}, "miscellaneous/functions.html": {} } }], ["encryptpassword(passwd", { "_index": 524, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/UserService.html": {} } }], ["encryptpassword(password", { "_index": 899, "title": {}, "body": { "miscellaneous/functions.html": {} } }], ["encryptpassword(plaintextpassword", { "_index": 515, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["envfilepath", { "_index": 142, "title": {}, "body": { "modules/AppModule.html": {} } }], ["eq", { "_index": 398, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["error", { "_index": 416, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/UserService.html": {} } }], ["error.message", { "_index": 424, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["errorresponse", { "_index": 557, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["errors", { "_index": 820, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["errors.length", { "_index": 822, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["exception", { "_index": 545, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["exception.filter.ts", { "_index": 538, "title": {}, "body": { "classes/HttpExceptionFilter.html": {}, "coverage.html": {} } }], ["exception.filter.ts:12", { "_index": 544, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["exception.getstatus", { "_index": 562, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["exception.message", { "_index": 555, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["exceptionfilter", { "_index": 540, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["executioncontext", { "_index": 727, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["expiresin", { "_index": 487, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["export", { "_index": 43, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "classes/Article.html": {}, "controllers/ArticleController.html": {}, "interfaces/ArticleList.html": {}, "modules/ArticleModule.html": {}, "injectables/ArticleService.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "interfaces/Comment.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "classes/Meta.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "injectables/MetaService.html": {}, "interfaces/Pagination.html": {}, "controllers/PublishController.html": {}, "modules/PublishModule.html": {}, "injectables/PublishService.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "classes/User.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "classes/userDTO.html": {} } }], ["exports", { "_index": 96, "title": {}, "body": { "modules/AppModule.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "modules/MetaModule.html": {}, "modules/PublishModule.html": {}, "modules/UserModule.html": {}, "overview.html": {} } }], ["express", { "_index": 697, "title": {}, "body": { "controllers/PublishController.html": {}, "dependencies.html": {} } }], ["extends", { "_index": 315, "title": {}, "body": { "interfaces/ArticleList.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "interfaces/Pagination.html": {} } }], ["extractjwt", { "_index": 576, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["extractjwt.fromauthheaderasbearertoken", { "_index": 585, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["failed", { "_index": 825, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["false", { "_index": 148, "title": {}, "body": { "modules/AppModule.html": {}, "injectables/ArticleService.html": {}, "injectables/JwtStrategy.html": {} } }], ["fields", { "_index": 361, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["fields).countdocuments", { "_index": 401, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["file", { "_index": 5, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "classes/Article.html": {}, "controllers/ArticleController.html": {}, "interfaces/ArticleList.html": {}, "modules/ArticleModule.html": {}, "injectables/ArticleService.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "interfaces/Comment.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "classes/Meta.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "injectables/MetaService.html": {}, "interfaces/Pagination.html": {}, "controllers/PublishController.html": {}, "modules/PublishModule.html": {}, "injectables/PublishService.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "classes/User.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "coverage.html": {}, "classes/userDTO.html": {} } }], ["file.buffer", { "_index": 720, "title": {}, "body": { "injectables/PublishService.html": {} } }], ["fileinterceptor", { "_index": 695, "title": {}, "body": { "controllers/PublishController.html": {} } }], ["filepath", { "_index": 125, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/ArticleController.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {} } }], ["findall", { "_index": 339, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["findall(params", { "_index": 358, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["findcount", { "_index": 340, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["findone", { "_index": 341, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/UserService.html": {} } }], ["findone(id", { "_index": 366, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["findone(name", { "_index": 787, "title": {}, "body": { "injectables/UserService.html": {} } }], ["function", { "_index": 847, "title": {}, "body": { "coverage.html": {} } }], ["functions", { "_index": 895, "title": { "miscellaneous/functions.html": {} }, "body": { "miscellaneous/functions.html": {} } }], ["get('/archive", { "_index": 236, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["get('/article/:_id", { "_index": 652, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["get('/hot/:length", { "_index": 244, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["get('/meta/:type/:_id", { "_index": 241, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["get(':_id", { "_index": 251, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["get(':type", { "_index": 632, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["getarchive", { "_index": 214, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["getarticlelist(_id", { "_index": 680, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["getdefaultoptions", { "_index": 380, "title": {}, "body": { "injectables/ArticleService.html": {}, "coverage.html": {}, "miscellaneous/functions.html": {} } }], ["gethello", { "_index": 85, "title": {}, "body": { "controllers/AppController.html": {}, "injectables/AppService.html": {} } }], ["gethotarticleslist", { "_index": 342, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["gethotarticleslist(length", { "_index": 368, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["getlist", { "_index": 215, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["getlist(@param", { "_index": 310, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["getlist(param", { "_index": 238, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["getmeta", { "_index": 664, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["getmeta(type", { "_index": 672, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["getmetaarticlelist", { "_index": 343, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["getmetaarticlelist(type", { "_index": 371, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["getmta", { "_index": 620, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["getmta(@param", { "_index": 642, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["getmta(param", { "_index": 630, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["getting", { "_index": 903, "title": { "index.html": {} }, "body": {} }], ["gettotal", { "_index": 359, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["gjtgibbnbqmrkeocy7uubvjqclxale", { "_index": 967, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["gt", { "_index": 389, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["hangzhou", { "_index": 972, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["hapi/joi", { "_index": 862, "title": {}, "body": { "dependencies.html": {} } }], ["hashedpassword", { "_index": 520, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["hashpasswd", { "_index": 799, "title": {}, "body": { "injectables/UserService.html": {} } }], ["hashpassword", { "_index": 523, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["headpic", { "_index": 178, "title": {}, "body": { "classes/Article.html": {} } }], ["hello", { "_index": 173, "title": {}, "body": { "injectables/AppService.html": {} } }], ["helmet", { "_index": 875, "title": {}, "body": { "dependencies.html": {} } }], ["hidden", { "_index": 200, "title": {}, "body": { "classes/Article.html": {}, "injectables/ArticleService.html": {} } }], ["host", { "_index": 542, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["host.switchtohttp", { "_index": 550, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["hotlist", { "_index": 216, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["hotlist(@param", { "_index": 291, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["hotlist(param", { "_index": 243, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["httpexception", { "_index": 510, "title": {}, "body": { "injectables/AuthService.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/UserService.html": {} } }], ["httpexceptionfilter", { "_index": 536, "title": { "classes/HttpExceptionFilter.html": {} }, "body": { "classes/HttpExceptionFilter.html": {}, "coverage.html": {} } }], ["https://www.wumao.org", { "_index": 325, "title": {}, "body": { "modules/ArticleModule.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {} } }], ["httpstatus", { "_index": 511, "title": {}, "body": { "injectables/AuthService.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/UserService.html": {} } }], ["httpstatus.forbidden", { "_index": 528, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/UserService.html": {} } }], ["httpstatus.internal_server_error", { "_index": 563, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["i.year", { "_index": 443, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["id", { "_index": 229, "title": {}, "body": { "controllers/ArticleController.html": {}, "injectables/ArticleService.html": {} } }], ["identifier", { "_index": 832, "title": {}, "body": { "coverage.html": {} } }], ["ignoreenvfile", { "_index": 147, "title": {}, "body": { "modules/AppModule.html": {} } }], ["ignoreexpiration", { "_index": 586, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["implements", { "_index": 539, "title": {}, "body": { "classes/HttpExceptionFilter.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "injectables/ValidationPipe.html": {} } }], ["import", { "_index": 37, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "classes/Article.html": {}, "controllers/ArticleController.html": {}, "modules/ArticleModule.html": {}, "injectables/ArticleService.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "classes/Meta.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "injectables/MetaService.html": {}, "controllers/PublishController.html": {}, "modules/PublishModule.html": {}, "injectables/PublishService.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "classes/User.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "classes/userDTO.html": {} } }], ["imports", { "_index": 110, "title": {}, "body": { "modules/AppModule.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "modules/MetaModule.html": {}, "modules/UserModule.html": {} } }], ["inc", { "_index": 409, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["index", { "_index": 7, "title": { "index.html": {} }, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "injectables/AppService.html": {}, "classes/Article.html": {}, "controllers/ArticleController.html": {}, "interfaces/ArticleList.html": {}, "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "interfaces/Comment.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "classes/Meta.html": {}, "controllers/MetaController.html": {}, "injectables/MetaService.html": {}, "interfaces/Pagination.html": {}, "controllers/PublishController.html": {}, "injectables/PublishService.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "classes/User.html": {}, "controllers/UserController.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "miscellaneous/functions.html": {}, "classes/userDTO.html": {}, "miscellaneous/variables.html": {} } }], ["info", { "_index": 3, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "classes/Article.html": {}, "controllers/ArticleController.html": {}, "interfaces/ArticleList.html": {}, "modules/ArticleModule.html": {}, "injectables/ArticleService.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "interfaces/Comment.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "classes/Meta.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "injectables/MetaService.html": {}, "interfaces/Pagination.html": {}, "controllers/PublishController.html": {}, "modules/PublishModule.html": {}, "injectables/PublishService.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "classes/User.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "classes/userDTO.html": {} } }], ["inject", { "_index": 166, "title": {}, "body": { "modules/AppModule.html": {}, "injectables/ArticleService.html": {} } }], ["inject('moment", { "_index": 386, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["injectable", { "_index": 167, "title": { "injectables/AppService.html": {}, "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "injectables/MetaService.html": {}, "injectables/PublishService.html": {}, "injectables/TransformInterceptor.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {} }, "body": { "injectables/AppService.html": {}, "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "injectables/MetaService.html": {}, "injectables/PublishService.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "coverage.html": {} } }], ["injectables", { "_index": 168, "title": {}, "body": { "injectables/AppService.html": {}, "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "injectables/MetaService.html": {}, "injectables/PublishService.html": {}, "injectables/TransformInterceptor.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "overview.html": {} } }], ["injectmodel", { "_index": 378, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/MetaService.html": {}, "injectables/UserService.html": {} } }], ["injectmodel('article", { "_index": 383, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["injectmodel('meta", { "_index": 385, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["installdevelopment", { "_index": 923, "title": {}, "body": { "index.html": {} } }], ["instanceof", { "_index": 561, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["intercept", { "_index": 733, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["intercept(context", { "_index": 738, "title": {}, "body": { "injectables/TransformInterceptor.html": {} } }], ["interface", { "_index": 312, "title": { "interfaces/ArticleList.html": {}, "interfaces/Comment.html": {}, "interfaces/Pagination.html": {}, "interfaces/Response.html": {} }, "body": { "interfaces/ArticleList.html": {}, "interfaces/Comment.html": {}, "interfaces/Pagination.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "coverage.html": {} } }], ["interface/article.interface", { "_index": 379, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["interface/pagination.interface", { "_index": 270, "title": {}, "body": { "controllers/ArticleController.html": {}, "injectables/ArticleService.html": {} } }], ["interface/user.interface", { "_index": 792, "title": {}, "body": { "injectables/UserService.html": {} } }], ["interfaces", { "_index": 313, "title": {}, "body": { "interfaces/ArticleList.html": {}, "interfaces/Comment.html": {}, "interfaces/Pagination.html": {}, "interfaces/Response.html": {}, "overview.html": {} } }], ["isarray", { "_index": 48, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/Article.html": {} } }], ["isemail", { "_index": 64, "title": {}, "body": { "classes/AddCommentDTO.html": {}, "classes/userDTO.html": {} } }], ["isemail()@apiproperty({description", { "_index": 60, "title": {}, "body": { "classes/AddCommentDTO.html": {} } }], ["isglobal", { "_index": 145, "title": {}, "body": { "modules/AppModule.html": {} } }], ["isin", { "_index": 74, "title": {}, "body": { "classes/AddMetaDTO.html": {} } }], ["isin([1", { "_index": 75, "title": {}, "body": { "classes/AddMetaDTO.html": {} } }], ["isin(undefined", { "_index": 72, "title": {}, "body": { "classes/AddMetaDTO.html": {} } }], ["isnotempty", { "_index": 38, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {} } }], ["isnotempty({message", { "_index": 24, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {} } }], ["item", { "_index": 445, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["item2", { "_index": 444, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["item2.add_time", { "_index": 446, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["items", { "_index": 289, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["itemyear", { "_index": 440, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["json.parse(json.stringify(searchparams", { "_index": 393, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["jwt", { "_index": 482, "title": {}, "body": { "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "dependencies.html": {} } }], ["jwt.strategy", { "_index": 473, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["jwt_config", { "_index": 478, "title": {}, "body": { "modules/AuthModule.html": {}, "injectables/JwtStrategy.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["jwt_config.secret", { "_index": 485, "title": {}, "body": { "modules/AuthModule.html": {}, "injectables/JwtStrategy.html": {} } }], ["jwtconfig", { "_index": 853, "title": {}, "body": { "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["jwtfromrequest", { "_index": 584, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["jwtmodule", { "_index": 476, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["jwtmodule.register", { "_index": 483, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["jwtservice", { "_index": 496, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["jwtstrategy", { "_index": 462, "title": { "injectables/JwtStrategy.html": {} }, "body": { "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "coverage.html": {}, "overview.html": {} } }], ["key", { "_index": 395, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["lasteditors", { "_index": 120, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/ArticleController.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {} } }], ["lastedittime", { "_index": 117, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/ArticleController.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {} } }], ["legend", { "_index": 92, "title": {}, "body": { "modules/AppModule.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "modules/MetaModule.html": {}, "modules/PublishModule.html": {}, "modules/UserModule.html": {}, "overview.html": {} } }], ["length", { "_index": 370, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["limit(+pagesize", { "_index": 406, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["limit(length", { "_index": 391, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["list", { "_index": 217, "title": {}, "body": { "controllers/ArticleController.html": {}, "injectables/ArticleService.html": {}, "index.html": {} } }], ["list(@query", { "_index": 281, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["list(queryinfo", { "_index": 246, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["literal", { "_index": 631, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["load", { "_index": 144, "title": {}, "body": { "modules/AppModule.html": {} } }], ["local", { "_index": 599, "title": {}, "body": { "injectables/LocalStrategy.html": {}, "dependencies.html": {} } }], ["local.strategy", { "_index": 474, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["localstrategy", { "_index": 463, "title": { "injectables/LocalStrategy.html": {} }, "body": { "modules/AuthModule.html": {}, "injectables/LocalStrategy.html": {}, "coverage.html": {}, "overview.html": {} } }], ["lodash", { "_index": 877, "title": {}, "body": { "dependencies.html": {} } }], ["logger", { "_index": 547, "title": {}, "body": { "classes/HttpExceptionFilter.html": {}, "injectables/ValidationPipe.html": {} } }], ["logger.error(`validation", { "_index": 824, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["logger.log", { "_index": 556, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["login", { "_index": 750, "title": {}, "body": { "controllers/UserController.html": {}, "index.html": {} } }], ["login(@body", { "_index": 770, "title": {}, "body": { "controllers/UserController.html": {} } }], ["login(logininfo", { "_index": 752, "title": {}, "body": { "controllers/UserController.html": {} } }], ["logininfo", { "_index": 755, "title": {}, "body": { "controllers/UserController.html": {} } }], ["logininfo.name", { "_index": 771, "title": {}, "body": { "controllers/UserController.html": {} } }], ["logininfo.passwd", { "_index": 772, "title": {}, "body": { "controllers/UserController.html": {} } }], ["luxon", { "_index": 879, "title": {}, "body": { "dependencies.html": {} } }], ["mag", { "_index": 430, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["make", { "_index": 902, "title": {}, "body": { "miscellaneous/functions.html": {} } }], ["makesalt", { "_index": 793, "title": {}, "body": { "injectables/UserService.html": {}, "coverage.html": {}, "miscellaneous/functions.html": {} } }], ["map", { "_index": 728, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["map((data", { "_index": 737, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["matching", { "_index": 51, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "classes/Article.html": {}, "controllers/ArticleController.html": {}, "interfaces/ArticleList.html": {}, "modules/ArticleModule.html": {}, "injectables/ArticleService.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "interfaces/Comment.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "classes/Meta.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "injectables/MetaService.html": {}, "interfaces/Pagination.html": {}, "controllers/PublishController.html": {}, "modules/PublishModule.html": {}, "injectables/PublishService.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "classes/User.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "coverage.html": {}, "dependencies.html": {}, "miscellaneous/functions.html": {}, "index.html": {}, "modules.html": {}, "overview.html": {}, "classes/userDTO.html": {}, "miscellaneous/variables.html": {} } }], ["maxlength", { "_index": 39, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/userDTO.html": {} } }], ["maxlength(10", { "_index": 948, "title": {}, "body": { "classes/userDTO.html": {} } }], ["maxlength(100", { "_index": 57, "title": {}, "body": { "classes/AddCommentDTO.html": {} } }], ["maxlength(20", { "_index": 33, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/userDTO.html": {} } }], ["message", { "_index": 34, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "classes/Article.html": {}, "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/JwtStrategy.html": {}, "injectables/PublishService.html": {}, "injectables/UserService.html": {}, "classes/userDTO.html": {} } }], ["meta", { "_index": 182, "title": { "classes/Meta.html": {} }, "body": { "classes/Article.html": {}, "modules/ArticleModule.html": {}, "classes/Meta.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "coverage.html": {}, "index.html": {} } }], ["meta.controller", { "_index": 662, "title": {}, "body": { "modules/MetaModule.html": {} } }], ["meta.dto", { "_index": 640, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["meta.schema", { "_index": 198, "title": {}, "body": { "classes/Article.html": {} } }], ["meta.service", { "_index": 639, "title": {}, "body": { "controllers/MetaController.html": {}, "modules/MetaModule.html": {} } }], ["metacontroller", { "_index": 615, "title": { "controllers/MetaController.html": {} }, "body": { "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "coverage.html": {} } }], ["metadata", { "_index": 886, "title": {}, "body": { "dependencies.html": {} } }], ["metamodel", { "_index": 346, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/MetaService.html": {} } }], ["metamodule", { "_index": 102, "title": { "modules/MetaModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/MetaModule.html": {}, "modules.html": {}, "overview.html": {} } }], ["metas", { "_index": 334, "title": {}, "body": { "modules/ArticleModule.html": {}, "modules/MetaModule.html": {} } }], ["metaschema", { "_index": 328, "title": {}, "body": { "modules/ArticleModule.html": {}, "classes/Meta.html": {}, "modules/MetaModule.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["metaservice", { "_index": 638, "title": { "injectables/MetaService.html": {} }, "body": { "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "injectables/MetaService.html": {}, "coverage.html": {}, "overview.html": {} } }], ["metatype", { "_index": 807, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["meta查看(根据type", { "_index": 909, "title": {}, "body": { "index.html": {} } }], ["methods", { "_index": 170, "title": {}, "body": { "injectables/AppService.html": {}, "controllers/ArticleController.html": {}, "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MetaController.html": {}, "injectables/MetaService.html": {}, "controllers/PublishController.html": {}, "injectables/PublishService.html": {}, "injectables/TransformInterceptor.html": {}, "controllers/UserController.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {} } }], ["minimum", { "_index": 26, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {} } }], ["minlength", { "_index": 947, "title": {}, "body": { "classes/userDTO.html": {} } }], ["minlength(5", { "_index": 942, "title": {}, "body": { "classes/userDTO.html": {} } }], ["miscellaneous", { "_index": 894, "title": { "miscellaneous/functions.html": {}, "miscellaneous/variables.html": {} }, "body": { "miscellaneous/functions.html": {}, "miscellaneous/variables.html": {} } }], ["mode", { "_index": 926, "title": {}, "body": { "index.html": {} } }], ["module", { "_index": 88, "title": { "modules/AppModule.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "modules/MetaModule.html": {}, "modules/PublishModule.html": {}, "modules/UserModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "modules/MetaModule.html": {}, "modules/PublishModule.html": {}, "modules/UserModule.html": {}, "overview.html": {} } }], ["module/article/article.module", { "_index": 131, "title": {}, "body": { "modules/AppModule.html": {} } }], ["module/auth/auth.module", { "_index": 133, "title": {}, "body": { "modules/AppModule.html": {} } }], ["module/meta/meta.module", { "_index": 135, "title": {}, "body": { "modules/AppModule.html": {} } }], ["module/publish/publish.module", { "_index": 136, "title": {}, "body": { "modules/AppModule.html": {} } }], ["module/user/user.controller", { "_index": 134, "title": {}, "body": { "modules/AppModule.html": {} } }], ["module/user/user.module", { "_index": 132, "title": {}, "body": { "modules/AppModule.html": {} } }], ["modules", { "_index": 90, "title": { "modules.html": {} }, "body": { "modules/AppModule.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "modules/MetaModule.html": {}, "modules/PublishModule.html": {}, "modules/UserModule.html": {}, "modules.html": {}, "overview.html": {} } }], ["moment", { "_index": 330, "title": {}, "body": { "modules/ArticleModule.html": {}, "injectables/ArticleService.html": {} } }], ["moment.moment", { "_index": 387, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["mongo_db", { "_index": 838, "title": {}, "body": { "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["mongo_db_dev", { "_index": 839, "title": {}, "body": { "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["mongodb://127.0.0.1:27017/nestblog", { "_index": 960, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["mongodb://admin:123456@localhost:27017/nestblog?authsource=admin", { "_index": 963, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["mongodb://root@8.133.172.218:27017/blog?authsource=admin", { "_index": 956, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["mongoose", { "_index": 197, "title": {}, "body": { "classes/Article.html": {}, "classes/Meta.html": {}, "dependencies.html": {} } }], ["mongoose.schema.types.objectid", { "_index": 201, "title": {}, "body": { "classes/Article.html": {}, "classes/Meta.html": {} } }], ["mongoosemodule", { "_index": 129, "title": {}, "body": { "modules/AppModule.html": {}, "modules/ArticleModule.html": {}, "modules/MetaModule.html": {}, "modules/UserModule.html": {} } }], ["mongoosemodule.forfeature", { "_index": 331, "title": {}, "body": { "modules/ArticleModule.html": {}, "modules/MetaModule.html": {}, "modules/UserModule.html": {} } }], ["mongoosemodule.forroot", { "_index": 149, "title": {}, "body": { "modules/AppModule.html": {} } }], ["mongoosemodule.forrootasync", { "_index": 155, "title": {}, "body": { "modules/AppModule.html": {} } }], ["msg", { "_index": 412, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/MetaService.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {} } }], ["name", { "_index": 56, "title": {}, "body": { "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "modules/AppModule.html": {}, "controllers/ArticleController.html": {}, "modules/ArticleModule.html": {}, "injectables/ArticleService.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "interfaces/Comment.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "classes/Meta.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "injectables/MetaService.html": {}, "controllers/PublishController.html": {}, "injectables/PublishService.html": {}, "injectables/TransformInterceptor.html": {}, "classes/User.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "miscellaneous/functions.html": {}, "classes/userDTO.html": {} } }], ["nest", { "_index": 126, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/ArticleController.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {} } }], ["nestblog", { "_index": 969, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["nestinterceptor", { "_index": 725, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["nestjs/common", { "_index": 81, "title": {}, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "controllers/ArticleController.html": {}, "modules/ArticleModule.html": {}, "injectables/ArticleService.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "injectables/MetaService.html": {}, "controllers/PublishController.html": {}, "modules/PublishModule.html": {}, "injectables/PublishService.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "dependencies.html": {} } }], ["nestjs/config", { "_index": 138, "title": {}, "body": { "modules/AppModule.html": {}, "dependencies.html": {} } }], ["nestjs/core", { "_index": 866, "title": {}, "body": { "dependencies.html": {} } }], ["nestjs/jwt", { "_index": 477, "title": {}, "body": { "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "dependencies.html": {} } }], ["nestjs/mongoose", { "_index": 130, "title": {}, "body": { "modules/AppModule.html": {}, "classes/Article.html": {}, "modules/ArticleModule.html": {}, "injectables/ArticleService.html": {}, "classes/Meta.html": {}, "modules/MetaModule.html": {}, "injectables/MetaService.html": {}, "classes/User.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "dependencies.html": {} } }], ["nestjs/passport", { "_index": 269, "title": {}, "body": { "controllers/ArticleController.html": {}, "modules/AuthModule.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MetaController.html": {}, "controllers/PublishController.html": {}, "dependencies.html": {} } }], ["nestjs/platform", { "_index": 696, "title": {}, "body": { "controllers/PublishController.html": {}, "dependencies.html": {} } }], ["nestjs/swagger", { "_index": 42, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "controllers/ArticleController.html": {}, "controllers/MetaController.html": {}, "dependencies.html": {} } }], ["new", { "_index": 418, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "injectables/PublishService.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "coverage.html": {} } }], ["next", { "_index": 735, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["next.handle().pipe", { "_index": 736, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["nodejs搭建的博客系统,不断完善中,后端采用nodejs最好的框架nestjs，使用typescript开发，，以及使用mongodb数据库，认证部分使用jwt认证，上传接入阿里oss，接入swagger", { "_index": 905, "title": {}, "body": { "index.html": {} } }], ["notacceptableexception", { "_index": 376, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["notfoundexception", { "_index": 377, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["npm", { "_index": 922, "title": {}, "body": { "index.html": {} } }], ["number", { "_index": 71, "title": {}, "body": { "classes/AddMetaDTO.html": {}, "classes/Article.html": {}, "interfaces/ArticleList.html": {}, "injectables/ArticleService.html": {}, "classes/Meta.html": {}, "interfaces/Pagination.html": {}, "injectables/ValidationPipe.html": {} } }], ["object", { "_index": 818, "title": {}, "body": { "injectables/ValidationPipe.html": {}, "miscellaneous/variables.html": {} } }], ["object.values(errors[0].constraints)[0", { "_index": 823, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["observable", { "_index": 730, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["optional", { "_index": 10, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "controllers/ArticleController.html": {}, "interfaces/ArticleList.html": {}, "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "interfaces/Comment.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "classes/Meta.html": {}, "controllers/MetaController.html": {}, "injectables/MetaService.html": {}, "interfaces/Pagination.html": {}, "controllers/PublishController.html": {}, "injectables/PublishService.html": {}, "injectables/TransformInterceptor.html": {}, "classes/User.html": {}, "controllers/UserController.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "miscellaneous/functions.html": {} } }], ["order", { "_index": 603, "title": {}, "body": { "classes/Meta.html": {} } }], ["os", { "_index": 279, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["oss", { "_index": 713, "title": {}, "body": { "injectables/PublishService.html": {}, "dependencies.html": {}, "index.html": {}, "miscellaneous/variables.html": {} } }], ["oss(oss_config", { "_index": 717, "title": {}, "body": { "injectables/PublishService.html": {} } }], ["oss.forpad.net", { "_index": 973, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["oss_config", { "_index": 715, "title": {}, "body": { "injectables/PublishService.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["oss_config.url", { "_index": 721, "title": {}, "body": { "injectables/PublishService.html": {} } }], ["out", { "_index": 107, "title": {}, "body": { "modules/AppModule.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "modules/MetaModule.html": {}, "modules/PublishModule.html": {}, "modules/UserModule.html": {}, "overview.html": {} } }], ["overview", { "_index": 938, "title": { "overview.html": {} }, "body": { "overview.html": {} } }], ["package", { "_index": 861, "title": { "dependencies.html": {} }, "body": {} }], ["pagecurrent", { "_index": 283, "title": {}, "body": { "controllers/ArticleController.html": {}, "interfaces/ArticleList.html": {}, "injectables/ArticleService.html": {}, "injectables/MetaService.html": {}, "interfaces/Pagination.html": {} } }], ["pageinfo", { "_index": 239, "title": {}, "body": { "controllers/ArticleController.html": {}, "injectables/ArticleService.html": {} } }], ["pagesize", { "_index": 284, "title": {}, "body": { "controllers/ArticleController.html": {}, "interfaces/ArticleList.html": {}, "injectables/ArticleService.html": {}, "injectables/MetaService.html": {}, "interfaces/Pagination.html": {} } }], ["pagination", { "_index": 240, "title": { "interfaces/Pagination.html": {} }, "body": { "controllers/ArticleController.html": {}, "interfaces/ArticleList.html": {}, "interfaces/Pagination.html": {}, "coverage.html": {} } }], ["param", { "_index": 232, "title": {}, "body": { "controllers/ArticleController.html": {}, "controllers/MetaController.html": {}, "injectables/UserService.html": {}, "index.html": {} } }], ["param(_id:string", { "_index": 916, "title": {}, "body": { "index.html": {} } }], ["param.id", { "_index": 303, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["parameters", { "_index": 224, "title": {}, "body": { "controllers/ArticleController.html": {}, "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MetaController.html": {}, "injectables/MetaService.html": {}, "controllers/PublishController.html": {}, "injectables/PublishService.html": {}, "injectables/TransformInterceptor.html": {}, "controllers/UserController.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "miscellaneous/functions.html": {} } }], ["params", { "_index": 354, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/AuthService.html": {} } }], ["params.name", { "_index": 531, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["params.passwd", { "_index": 532, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["params2", { "_index": 374, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["pass", { "_index": 153, "title": {}, "body": { "modules/AppModule.html": {} } }], ["passport", { "_index": 578, "title": {}, "body": { "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "dependencies.html": {} } }], ["passportmodule", { "_index": 475, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["passportmodule.register", { "_index": 480, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["passportstrategy", { "_index": 579, "title": {}, "body": { "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {} } }], ["passportstrategy(strategy", { "_index": 582, "title": {}, "body": { "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {} } }], ["passwd", { "_index": 507, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/LocalStrategy.html": {}, "classes/User.html": {}, "injectables/UserService.html": {}, "classes/userDTO.html": {} } }], ["password", { "_index": 901, "title": {}, "body": { "miscellaneous/functions.html": {}, "miscellaneous/variables.html": {} } }], ["path", { "_index": 685, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["payload", { "_index": 530, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {} } }], ["payload.name", { "_index": 592, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["payload.passwd", { "_index": 593, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["pipe", { "_index": 910, "title": {}, "body": { "index.html": {} } }], ["pipe/validation.pipe", { "_index": 273, "title": {}, "body": { "controllers/ArticleController.html": {}, "controllers/MetaController.html": {}, "controllers/UserController.html": {} } }], ["pipetransform", { "_index": 811, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["plaintextpassword", { "_index": 502, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["plaintoclass", { "_index": 813, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["plaintoclass(metatype", { "_index": 819, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["please", { "_index": 468, "title": {}, "body": { "modules/AuthModule.html": {}, "modules/UserModule.html": {} } }], ["populate", { "_index": 684, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["populate(\"tag_id", { "_index": 404, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["populate('category_id", { "_index": 403, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["populate('category_id').populate(\"tag_id\").exec", { "_index": 411, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["port", { "_index": 955, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["post", { "_index": 261, "title": {}, "body": { "controllers/ArticleController.html": {}, "controllers/MetaController.html": {}, "controllers/PublishController.html": {}, "controllers/UserController.html": {}, "index.html": {} } }], ["post('/:id/comments", { "_index": 307, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["post('/:id/comments/')@usepipes(new", { "_index": 227, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["post('/login", { "_index": 753, "title": {}, "body": { "controllers/UserController.html": {} } }], ["post('upload", { "_index": 701, "title": {}, "body": { "controllers/PublishController.html": {} } }], ["prefix", { "_index": 211, "title": {}, "body": { "controllers/ArticleController.html": {}, "controllers/MetaController.html": {}, "controllers/PublishController.html": {}, "controllers/UserController.html": {} } }], ["private", { "_index": 384, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "injectables/MetaService.html": {}, "controllers/UserController.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {} } }], ["process.env.database_passwd", { "_index": 154, "title": {}, "body": { "modules/AppModule.html": {} } }], ["process.env.database_url", { "_index": 150, "title": {}, "body": { "modules/AppModule.html": {} } }], ["process.env.database_user", { "_index": 152, "title": {}, "body": { "modules/AppModule.html": {} } }], ["promise", { "_index": 351, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "injectables/LocalStrategy.html": {}, "injectables/MetaService.html": {}, "injectables/UserService.html": {} } }], ["prop", { "_index": 180, "title": {}, "body": { "classes/Article.html": {}, "classes/Meta.html": {}, "classes/User.html": {} } }], ["prop(number", { "_index": 609, "title": {}, "body": { "classes/Meta.html": {} } }], ["prop(string", { "_index": 604, "title": {}, "body": { "classes/Meta.html": {}, "classes/User.html": {} } }], ["prop(undefined", { "_index": 183, "title": {}, "body": { "classes/Article.html": {} } }], ["prop({type", { "_index": 190, "title": {}, "body": { "classes/Article.html": {}, "classes/Meta.html": {} } }], ["properties", { "_index": 8, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "classes/Article.html": {}, "interfaces/ArticleList.html": {}, "injectables/AuthService.html": {}, "interfaces/Comment.html": {}, "classes/Meta.html": {}, "interfaces/Pagination.html": {}, "interfaces/Response.html": {}, "classes/User.html": {}, "classes/userDTO.html": {} } }], ["providers", { "_index": 95, "title": {}, "body": { "modules/AppModule.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "modules/MetaModule.html": {}, "modules/PublishModule.html": {}, "modules/UserModule.html": {}, "overview.html": {} } }], ["publish", { "_index": 688, "title": {}, "body": { "controllers/PublishController.html": {} } }], ["publish.controller", { "_index": 708, "title": {}, "body": { "modules/PublishModule.html": {} } }], ["publish.service", { "_index": 699, "title": {}, "body": { "controllers/PublishController.html": {}, "modules/PublishModule.html": {} } }], ["publish/upload", { "_index": 921, "title": {}, "body": { "index.html": {} } }], ["publishcontroller", { "_index": 686, "title": { "controllers/PublishController.html": {} }, "body": { "controllers/PublishController.html": {}, "modules/PublishModule.html": {}, "coverage.html": {} } }], ["publishmodule", { "_index": 103, "title": { "modules/PublishModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/PublishModule.html": {}, "modules.html": {}, "overview.html": {} } }], ["publishservice", { "_index": 698, "title": { "injectables/PublishService.html": {} }, "body": { "controllers/PublishController.html": {}, "modules/PublishModule.html": {}, "injectables/PublishService.html": {}, "coverage.html": {}, "overview.html": {} } }], ["push", { "_index": 431, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["put", { "_index": 262, "title": {}, "body": { "controllers/ArticleController.html": {}, "controllers/MetaController.html": {}, "index.html": {} } }], ["put(':_id", { "_index": 649, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["put(':id", { "_index": 299, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["query", { "_index": 263, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["query({pagesize=10,pagecurrent=1", { "_index": 915, "title": {}, "body": { "index.html": {} } }], ["queryinfo", { "_index": 249, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["readarticle", { "_index": 218, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["readarticle(@param", { "_index": 293, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["readarticle(param", { "_index": 250, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["readonly", { "_index": 9, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "controllers/AppController.html": {}, "injectables/AuthService.html": {}, "injectables/LocalStrategy.html": {}, "classes/userDTO.html": {} } }], ["ref", { "_index": 202, "title": {}, "body": { "classes/Article.html": {}, "classes/Meta.html": {} } }], ["reflect", { "_index": 885, "title": {}, "body": { "dependencies.html": {} } }], ["region", { "_index": 970, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["register", { "_index": 751, "title": {}, "body": { "controllers/UserController.html": {} } }], ["register(@body", { "_index": 768, "title": {}, "body": { "controllers/UserController.html": {} } }], ["register(body", { "_index": 756, "title": {}, "body": { "controllers/UserController.html": {} } }], ["registeruser", { "_index": 784, "title": {}, "body": { "injectables/UserService.html": {} } }], ["registeruser(requestbody", { "_index": 789, "title": {}, "body": { "injectables/UserService.html": {} } }], ["request", { "_index": 553, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["request.originalurl", { "_index": 560, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["requestbody", { "_index": 791, "title": {}, "body": { "injectables/UserService.html": {} } }], ["required", { "_index": 205, "title": {}, "body": { "classes/Article.html": {}, "controllers/ArticleController.html": {} } }], ["res", { "_index": 432, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/MetaService.html": {} } }], ["res.foreach(item", { "_index": 439, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["reset", { "_index": 106, "title": {}, "body": { "modules/AppModule.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "modules/MetaModule.html": {}, "modules/PublishModule.html": {}, "modules/UserModule.html": {}, "overview.html": {} } }], ["response", { "_index": 551, "title": { "interfaces/Response.html": {} }, "body": { "classes/HttpExceptionFilter.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "coverage.html": {} } }], ["response.header('content", { "_index": 565, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["response.send(errorresponse", { "_index": 569, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["response.status(status", { "_index": 564, "title": {}, "body": { "classes/HttpExceptionFilter.html": {} } }], ["restful", { "_index": 913, "title": {}, "body": { "index.html": {} } }], ["result", { "_index": 50, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "classes/Article.html": {}, "controllers/ArticleController.html": {}, "interfaces/ArticleList.html": {}, "modules/ArticleModule.html": {}, "injectables/ArticleService.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "interfaces/Comment.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "classes/Meta.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "injectables/MetaService.html": {}, "interfaces/Pagination.html": {}, "controllers/PublishController.html": {}, "modules/PublishModule.html": {}, "injectables/PublishService.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "classes/User.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "coverage.html": {}, "dependencies.html": {}, "miscellaneous/functions.html": {}, "index.html": {}, "modules.html": {}, "overview.html": {}, "classes/userDTO.html": {}, "miscellaneous/variables.html": {} } }], ["result.deletedcount", { "_index": 678, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["result.name", { "_index": 722, "title": {}, "body": { "injectables/PublishService.html": {} } }], ["results", { "_index": 52, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "classes/Article.html": {}, "controllers/ArticleController.html": {}, "interfaces/ArticleList.html": {}, "modules/ArticleModule.html": {}, "injectables/ArticleService.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "interfaces/Comment.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "classes/Meta.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "injectables/MetaService.html": {}, "interfaces/Pagination.html": {}, "controllers/PublishController.html": {}, "modules/PublishModule.html": {}, "injectables/PublishService.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "classes/User.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "coverage.html": {}, "dependencies.html": {}, "miscellaneous/functions.html": {}, "index.html": {}, "modules.html": {}, "overview.html": {}, "classes/userDTO.html": {}, "miscellaneous/variables.html": {} } }], ["return", { "_index": 86, "title": {}, "body": { "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "controllers/ArticleController.html": {}, "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MetaController.html": {}, "injectables/MetaService.html": {}, "controllers/PublishController.html": {}, "injectables/PublishService.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "controllers/UserController.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {} } }], ["returns", { "_index": 172, "title": {}, "body": { "injectables/AppService.html": {}, "controllers/ArticleController.html": {}, "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "controllers/MetaController.html": {}, "injectables/MetaService.html": {}, "controllers/PublishController.html": {}, "injectables/PublishService.html": {}, "injectables/TransformInterceptor.html": {}, "controllers/UserController.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "miscellaneous/functions.html": {} } }], ["rimraf", { "_index": 888, "title": {}, "body": { "dependencies.html": {} } }], ["root", { "_index": 958, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["run", { "_index": 924, "title": {}, "body": { "index.html": {} } }], ["rxjs", { "_index": 731, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "dependencies.html": {} } }], ["rxjs/operators", { "_index": 729, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["salt", { "_index": 503, "title": {}, "body": { "injectables/AuthService.html": {}, "classes/User.html": {}, "injectables/UserService.html": {}, "miscellaneous/functions.html": {} } }], ["sameinfo", { "_index": 796, "title": {}, "body": { "injectables/UserService.html": {} } }], ["sameinfo.length", { "_index": 798, "title": {}, "body": { "injectables/UserService.html": {} } }], ["save", { "_index": 423, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/MetaService.html": {} } }], ["schema", { "_index": 195, "title": {}, "body": { "classes/Article.html": {}, "modules/ArticleModule.html": {}, "classes/Meta.html": {}, "modules/MetaModule.html": {}, "classes/User.html": {}, "modules/UserModule.html": {} } }], ["schema/article.schema", { "_index": 327, "title": {}, "body": { "modules/ArticleModule.html": {} } }], ["schema/meta.schema", { "_index": 329, "title": {}, "body": { "modules/ArticleModule.html": {}, "modules/MetaModule.html": {} } }], ["schema/users.schema", { "_index": 781, "title": {}, "body": { "modules/UserModule.html": {} } }], ["schemafactory", { "_index": 196, "title": {}, "body": { "classes/Article.html": {}, "classes/Meta.html": {}, "classes/User.html": {} } }], ["schemafactory.createforclass(article", { "_index": 208, "title": {}, "body": { "classes/Article.html": {}, "miscellaneous/variables.html": {} } }], ["schemafactory.createforclass(meta", { "_index": 614, "title": {}, "body": { "classes/Meta.html": {}, "miscellaneous/variables.html": {} } }], ["schemafactory.createforclass(user", { "_index": 748, "title": {}, "body": { "classes/User.html": {}, "miscellaneous/variables.html": {} } }], ["searchparams", { "_index": 392, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["searchparams[key", { "_index": 399, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["searchparamstemp", { "_index": 394, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["searchparamstemp[key", { "_index": 396, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["secret", { "_index": 484, "title": {}, "body": { "modules/AuthModule.html": {}, "miscellaneous/variables.html": {} } }], ["secretorkey", { "_index": 587, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["select", { "_index": 402, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/MetaService.html": {} } }], ["select('title", { "_index": 437, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["set", { "_index": 469, "title": {}, "body": { "modules/AuthModule.html": {}, "modules/UserModule.html": {} } }], ["settimeout", { "_index": 161, "title": {}, "body": { "modules/AppModule.html": {} } }], ["settings", { "_index": 123, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/ArticleController.html": {}, "modules/AuthModule.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {} } }], ["signoptions", { "_index": 486, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["skip((pagecurrent", { "_index": 405, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["sort", { "_index": 390, "title": {}, "body": { "injectables/ArticleService.html": {}, "classes/Meta.html": {} } }], ["source", { "_index": 4, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "controllers/AppController.html": {}, "modules/AppModule.html": {}, "injectables/AppService.html": {}, "classes/Article.html": {}, "controllers/ArticleController.html": {}, "interfaces/ArticleList.html": {}, "modules/ArticleModule.html": {}, "injectables/ArticleService.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "interfaces/Comment.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "classes/Meta.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "injectables/MetaService.html": {}, "interfaces/Pagination.html": {}, "controllers/PublishController.html": {}, "modules/PublishModule.html": {}, "injectables/PublishService.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "classes/User.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "classes/userDTO.html": {} } }], ["src/.../app.config.ts", { "_index": 951, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["src/.../article.model.ts", { "_index": 898, "title": {}, "body": { "miscellaneous/functions.html": {} } }], ["src/.../article.schema.ts", { "_index": 950, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["src/.../auth.config.ts", { "_index": 952, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["src/.../cryptogram.ts", { "_index": 897, "title": {}, "body": { "miscellaneous/functions.html": {} } }], ["src/.../main.ts", { "_index": 896, "title": {}, "body": { "miscellaneous/functions.html": {} } }], ["src/.../meta.schema.ts", { "_index": 953, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["src/.../users.schema.ts", { "_index": 954, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["src/app.config.ts", { "_index": 834, "title": {}, "body": { "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["src/app.controller.ts", { "_index": 80, "title": {}, "body": { "controllers/AppController.html": {}, "coverage.html": {} } }], ["src/app.module.ts", { "_index": 108, "title": {}, "body": { "modules/AppModule.html": {} } }], ["src/app.service.ts", { "_index": 169, "title": {}, "body": { "injectables/AppService.html": {}, "coverage.html": {} } }], ["src/app.service.ts:5", { "_index": 171, "title": {}, "body": { "injectables/AppService.html": {} } }], ["src/config/${process.env.node_env}.env", { "_index": 143, "title": {}, "body": { "modules/AppModule.html": {} } }], ["src/filters/http", { "_index": 537, "title": {}, "body": { "classes/HttpExceptionFilter.html": {}, "coverage.html": {} } }], ["src/interceptor/transform.interceptor.ts", { "_index": 723, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "coverage.html": {} } }], ["src/interceptor/transform.interceptor.ts:15", { "_index": 739, "title": {}, "body": { "injectables/TransformInterceptor.html": {} } }], ["src/interface/article.interface", { "_index": 271, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["src/interface/article.interface.ts", { "_index": 841, "title": {}, "body": { "coverage.html": {} } }], ["src/interface/comment.interface.ts", { "_index": 535, "title": {}, "body": { "interfaces/Comment.html": {}, "coverage.html": {} } }], ["src/interface/pagination.interface.ts", { "_index": 314, "title": {}, "body": { "interfaces/ArticleList.html": {}, "interfaces/Pagination.html": {}, "coverage.html": {} } }], ["src/interface/user.interface.ts", { "_index": 845, "title": {}, "body": { "coverage.html": {} } }], ["src/main.ts", { "_index": 846, "title": {}, "body": { "coverage.html": {}, "miscellaneous/functions.html": {} } }], ["src/module/article/article.controller.ts", { "_index": 210, "title": {}, "body": { "controllers/ArticleController.html": {}, "coverage.html": {} } }], ["src/module/article/article.controller.ts:104", { "_index": 231, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["src/module/article/article.controller.ts:110", { "_index": 242, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["src/module/article/article.controller.ts:37", { "_index": 248, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["src/module/article/article.controller.ts:50", { "_index": 237, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["src/module/article/article.controller.ts:57", { "_index": 245, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["src/module/article/article.controller.ts:63", { "_index": 252, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["src/module/article/article.controller.ts:72", { "_index": 223, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["src/module/article/article.controller.ts:82", { "_index": 255, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["src/module/article/article.controller.ts:95", { "_index": 235, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["src/module/article/article.dto.ts", { "_index": 6, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "coverage.html": {} } }], ["src/module/article/article.dto.ts:20", { "_index": 36, "title": {}, "body": { "classes/AddArticleDTO.html": {} } }], ["src/module/article/article.dto.ts:28", { "_index": 29, "title": {}, "body": { "classes/AddArticleDTO.html": {} } }], ["src/module/article/article.dto.ts:37", { "_index": 31, "title": {}, "body": { "classes/AddArticleDTO.html": {} } }], ["src/module/article/article.dto.ts:42", { "_index": 23, "title": {}, "body": { "classes/AddArticleDTO.html": {} } }], ["src/module/article/article.dto.ts:47", { "_index": 32, "title": {}, "body": { "classes/AddArticleDTO.html": {} } }], ["src/module/article/article.model.ts", { "_index": 849, "title": {}, "body": { "coverage.html": {}, "miscellaneous/functions.html": {} } }], ["src/module/article/article.module.ts", { "_index": 320, "title": {}, "body": { "modules/ArticleModule.html": {} } }], ["src/module/article/article.service.ts", { "_index": 335, "title": {}, "body": { "injectables/ArticleService.html": {}, "coverage.html": {} } }], ["src/module/article/article.service.ts:102", { "_index": 375, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["src/module/article/article.service.ts:116", { "_index": 357, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["src/module/article/article.service.ts:132", { "_index": 350, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["src/module/article/article.service.ts:146", { "_index": 372, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["src/module/article/article.service.ts:160", { "_index": 355, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["src/module/article/article.service.ts:23", { "_index": 347, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["src/module/article/article.service.ts:31", { "_index": 369, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["src/module/article/article.service.ts:36", { "_index": 362, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["src/module/article/article.service.ts:65", { "_index": 367, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["src/module/article/article.service.ts:84", { "_index": 365, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["src/module/article/article.service.ts:89", { "_index": 353, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["src/module/article/comment.dto.ts", { "_index": 54, "title": {}, "body": { "classes/AddCommentDTO.html": {}, "coverage.html": {} } }], ["src/module/article/comment.dto.ts:20", { "_index": 63, "title": {}, "body": { "classes/AddCommentDTO.html": {} } }], ["src/module/article/comment.dto.ts:29", { "_index": 62, "title": {}, "body": { "classes/AddCommentDTO.html": {} } }], ["src/module/article/comment.dto.ts:39", { "_index": 59, "title": {}, "body": { "classes/AddCommentDTO.html": {} } }], ["src/module/auth/auth.config.ts", { "_index": 852, "title": {}, "body": { "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["src/module/auth/auth.module.ts", { "_index": 464, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["src/module/auth/auth.service.ts", { "_index": 490, "title": {}, "body": { "injectables/AuthService.html": {}, "coverage.html": {} } }], ["src/module/auth/auth.service.ts:15", { "_index": 497, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["src/module/auth/auth.service.ts:21", { "_index": 509, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["src/module/auth/auth.service.ts:23", { "_index": 504, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["src/module/auth/auth.service.ts:32", { "_index": 508, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["src/module/auth/auth.service.ts:72", { "_index": 500, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["src/module/auth/jwt.strategy.ts", { "_index": 570, "title": {}, "body": { "injectables/JwtStrategy.html": {}, "coverage.html": {} } }], ["src/module/auth/jwt.strategy.ts:16", { "_index": 573, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["src/module/auth/jwt.strategy.ts:26", { "_index": 575, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["src/module/auth/local.strategy.ts", { "_index": 595, "title": {}, "body": { "injectables/LocalStrategy.html": {}, "coverage.html": {} } }], ["src/module/auth/local.strategy.ts:15", { "_index": 596, "title": {}, "body": { "injectables/LocalStrategy.html": {} } }], ["src/module/auth/local.strategy.ts:20", { "_index": 598, "title": {}, "body": { "injectables/LocalStrategy.html": {} } }], ["src/module/meta/meta.controller.ts", { "_index": 616, "title": {}, "body": { "controllers/MetaController.html": {}, "coverage.html": {} } }], ["src/module/meta/meta.controller.ts:31", { "_index": 633, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["src/module/meta/meta.controller.ts:39", { "_index": 623, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["src/module/meta/meta.controller.ts:45", { "_index": 629, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["src/module/meta/meta.controller.ts:53", { "_index": 626, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["src/module/meta/meta.dto.ts", { "_index": 67, "title": {}, "body": { "classes/AddMetaDTO.html": {}, "coverage.html": {} } }], ["src/module/meta/meta.dto.ts:14", { "_index": 70, "title": {}, "body": { "classes/AddMetaDTO.html": {} } }], ["src/module/meta/meta.dto.ts:17", { "_index": 69, "title": {}, "body": { "classes/AddMetaDTO.html": {} } }], ["src/module/meta/meta.dto.ts:20", { "_index": 73, "title": {}, "body": { "classes/AddMetaDTO.html": {} } }], ["src/module/meta/meta.module.ts", { "_index": 658, "title": {}, "body": { "modules/MetaModule.html": {} } }], ["src/module/meta/meta.service.ts", { "_index": 663, "title": {}, "body": { "injectables/MetaService.html": {}, "coverage.html": {} } }], ["src/module/meta/meta.service.ts:14", { "_index": 666, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["src/module/meta/meta.service.ts:17", { "_index": 673, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["src/module/meta/meta.service.ts:22", { "_index": 667, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["src/module/meta/meta.service.ts:32", { "_index": 671, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["src/module/meta/meta.service.ts:39", { "_index": 669, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["src/module/publish/publish.controller.ts", { "_index": 687, "title": {}, "body": { "controllers/PublishController.html": {}, "coverage.html": {} } }], ["src/module/publish/publish.controller.ts:18", { "_index": 692, "title": {}, "body": { "controllers/PublishController.html": {} } }], ["src/module/publish/publish.module.ts", { "_index": 707, "title": {}, "body": { "modules/PublishModule.html": {} } }], ["src/module/publish/publish.service.ts", { "_index": 709, "title": {}, "body": { "injectables/PublishService.html": {}, "coverage.html": {} } }], ["src/module/publish/publish.service.ts:7", { "_index": 712, "title": {}, "body": { "injectables/PublishService.html": {} } }], ["src/module/user/user.controller.ts", { "_index": 749, "title": {}, "body": { "controllers/UserController.html": {}, "coverage.html": {} } }], ["src/module/user/user.controller.ts:24", { "_index": 759, "title": {}, "body": { "controllers/UserController.html": {} } }], ["src/module/user/user.controller.ts:29", { "_index": 754, "title": {}, "body": { "controllers/UserController.html": {} } }], ["src/module/user/user.dto.ts", { "_index": 854, "title": {}, "body": { "coverage.html": {}, "classes/userDTO.html": {} } }], ["src/module/user/user.dto.ts:14", { "_index": 944, "title": {}, "body": { "classes/userDTO.html": {} } }], ["src/module/user/user.dto.ts:18", { "_index": 946, "title": {}, "body": { "classes/userDTO.html": {} } }], ["src/module/user/user.dto.ts:22", { "_index": 941, "title": {}, "body": { "classes/userDTO.html": {} } }], ["src/module/user/user.module.ts", { "_index": 776, "title": {}, "body": { "modules/UserModule.html": {} } }], ["src/module/user/user.service.ts", { "_index": 783, "title": {}, "body": { "injectables/UserService.html": {}, "coverage.html": {} } }], ["src/module/user/user.service.ts:15", { "_index": 786, "title": {}, "body": { "injectables/UserService.html": {} } }], ["src/module/user/user.service.ts:23", { "_index": 788, "title": {}, "body": { "injectables/UserService.html": {} } }], ["src/module/user/user.service.ts:36", { "_index": 790, "title": {}, "body": { "injectables/UserService.html": {} } }], ["src/pipe/validation.pipe.ts", { "_index": 802, "title": {}, "body": { "injectables/ValidationPipe.html": {}, "coverage.html": {} } }], ["src/pipe/validation.pipe.ts:22", { "_index": 810, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["src/pipe/validation.pipe.ts:39", { "_index": 806, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["src/schema/article.schema.ts", { "_index": 176, "title": {}, "body": { "classes/Article.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["src/schema/article.schema.ts:19", { "_index": 192, "title": {}, "body": { "classes/Article.html": {} } }], ["src/schema/article.schema.ts:22", { "_index": 186, "title": {}, "body": { "classes/Article.html": {} } }], ["src/schema/article.schema.ts:28", { "_index": 187, "title": {}, "body": { "classes/Article.html": {} } }], ["src/schema/article.schema.ts:31", { "_index": 188, "title": {}, "body": { "classes/Article.html": {} } }], ["src/schema/article.schema.ts:34", { "_index": 181, "title": {}, "body": { "classes/Article.html": {} } }], ["src/schema/article.schema.ts:37", { "_index": 194, "title": {}, "body": { "classes/Article.html": {} } }], ["src/schema/article.schema.ts:40", { "_index": 193, "title": {}, "body": { "classes/Article.html": {} } }], ["src/schema/article.schema.ts:46", { "_index": 185, "title": {}, "body": { "classes/Article.html": {} } }], ["src/schema/article.schema.ts:55", { "_index": 184, "title": {}, "body": { "classes/Article.html": {} } }], ["src/schema/article.schema.ts:63", { "_index": 189, "title": {}, "body": { "classes/Article.html": {} } }], ["src/schema/meta.schema.ts", { "_index": 601, "title": {}, "body": { "classes/Meta.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["src/schema/meta.schema.ts:22", { "_index": 611, "title": {}, "body": { "classes/Meta.html": {} } }], ["src/schema/meta.schema.ts:25", { "_index": 608, "title": {}, "body": { "classes/Meta.html": {} } }], ["src/schema/meta.schema.ts:28", { "_index": 605, "title": {}, "body": { "classes/Meta.html": {} } }], ["src/schema/meta.schema.ts:31", { "_index": 607, "title": {}, "body": { "classes/Meta.html": {} } }], ["src/schema/meta.schema.ts:34", { "_index": 610, "title": {}, "body": { "classes/Meta.html": {} } }], ["src/schema/meta.schema.ts:40", { "_index": 606, "title": {}, "body": { "classes/Meta.html": {} } }], ["src/schema/users.schema.ts", { "_index": 740, "title": {}, "body": { "classes/User.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["src/schema/users.schema.ts:14", { "_index": 744, "title": {}, "body": { "classes/User.html": {} } }], ["src/schema/users.schema.ts:17", { "_index": 745, "title": {}, "body": { "classes/User.html": {} } }], ["src/schema/users.schema.ts:20", { "_index": 742, "title": {}, "body": { "classes/User.html": {} } }], ["src/schema/users.schema.ts:23", { "_index": 743, "title": {}, "body": { "classes/User.html": {} } }], ["src/schema/users.schema.ts:26", { "_index": 746, "title": {}, "body": { "classes/User.html": {} } }], ["src/utils/cryptogram.ts", { "_index": 857, "title": {}, "body": { "coverage.html": {}, "miscellaneous/functions.html": {} } }], ["start:devproduction", { "_index": 927, "title": {}, "body": { "index.html": {} } }], ["start:prodtest", { "_index": 928, "title": {}, "body": { "index.html": {} } }], ["started", { "_index": 904, "title": { "index.html": {} }, "body": {} }], ["startwatch", { "_index": 925, "title": {}, "body": { "index.html": {} } }], ["statements", { "_index": 833, "title": {}, "body": { "coverage.html": {} } }], ["status", { "_index": 527, "title": {}, "body": { "injectables/AuthService.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/UserService.html": {} } }], ["step", { "_index": 517, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "controllers/UserController.html": {} } }], ["strategy", { "_index": 577, "title": {}, "body": { "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {} } }], ["string", { "_index": 18, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "controllers/AppController.html": {}, "injectables/AppService.html": {}, "classes/Article.html": {}, "controllers/ArticleController.html": {}, "interfaces/ArticleList.html": {}, "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "interfaces/Comment.html": {}, "injectables/LocalStrategy.html": {}, "classes/Meta.html": {}, "controllers/MetaController.html": {}, "injectables/MetaService.html": {}, "interfaces/Pagination.html": {}, "classes/User.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "miscellaneous/functions.html": {}, "classes/userDTO.html": {} } }], ["string,body:any", { "_index": 681, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["success", { "_index": 413, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["super", { "_index": 583, "title": {}, "body": { "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {} } }], ["support", { "_index": 935, "title": {}, "body": { "modules.html": {} } }], ["svg", { "_index": 936, "title": {}, "body": { "modules.html": {} } }], ["swagger", { "_index": 891, "title": {}, "body": { "dependencies.html": {} } }], ["t", { "_index": 724, "title": {}, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {} } }], ["", { "_index": 965, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["table", { "_index": 860, "title": {}, "body": { "coverage.html": {} } }], ["tablesort(document.getelementbyid('coverage", { "_index": 859, "title": {}, "body": { "coverage.html": {} } }], ["tag_id", { "_index": 14, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/Article.html": {}, "injectables/ArticleService.html": {} } }], ["tagid", { "_index": 317, "title": {}, "body": { "interfaces/ArticleList.html": {}, "injectables/ArticleService.html": {}, "interfaces/Pagination.html": {} } }], ["test:cov", { "_index": 933, "title": {}, "body": { "index.html": {} } }], ["test:e2etest", { "_index": 932, "title": {}, "body": { "index.html": {} } }], ["teste2e", { "_index": 931, "title": {}, "body": { "index.html": {} } }], ["tests", { "_index": 930, "title": {}, "body": { "index.html": {} } }], ["this.appservice.gethello", { "_index": 87, "title": {}, "body": { "controllers/AppController.html": {} } }], ["this.articlemodel", { "_index": 422, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["this.articlemodel.countdocuments", { "_index": 419, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["this.articlemodel.find", { "_index": 388, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["this.articlemodel.find(searchparamstemp", { "_index": 400, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["this.articlemodel.findoneandupdate", { "_index": 408, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["this.articlemodel.updateone", { "_index": 428, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["this.articlemodel.updateone(params", { "_index": 425, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["this.articlemodel.where", { "_index": 435, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["this.articleservice.addcomment(param.id", { "_index": 309, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["this.articleservice.adddata(body", { "_index": 298, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["this.articleservice.archive", { "_index": 290, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["this.articleservice.deletearticle(param.id", { "_index": 306, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["this.articleservice.findall(queryinfo", { "_index": 287, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["this.articleservice.findone(param._id", { "_index": 294, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["this.articleservice.gethotarticleslist(+param.length", { "_index": 292, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["this.articleservice.getmetaarticlelist(type", { "_index": 311, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["this.articleservice.updatearticle", { "_index": 301, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["this.authservice.validateuser", { "_index": 591, "title": {}, "body": { "injectables/JwtStrategy.html": {}, "controllers/UserController.html": {} } }], ["this.authservice.validateuser(name", { "_index": 600, "title": {}, "body": { "injectables/LocalStrategy.html": {} } }], ["this.certificate", { "_index": 526, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["this.findone(name", { "_index": 797, "title": {}, "body": { "injectables/UserService.html": {} } }], ["this.jwtservice.sign(payload", { "_index": 534, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["this.metamodel", { "_index": 676, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["this.metamodel.deleteone", { "_index": 677, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["this.metamodel.find", { "_index": 675, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["this.metamodel.findone", { "_index": 683, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["this.metamodel.findoneandupdate", { "_index": 679, "title": {}, "body": { "injectables/MetaService.html": {} } }], ["this.metaservice.addmeta(body", { "_index": 645, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["this.metaservice.changemeta(param._id", { "_index": 651, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["this.metaservice.deletemeta(param._id", { "_index": 648, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["this.metaservice.getarticlelist(param", { "_index": 655, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["this.metaservice.getmeta(param.type", { "_index": 643, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["this.publishservice.upload(file", { "_index": 704, "title": {}, "body": { "controllers/PublishController.html": {} } }], ["this.tovalidate(metatype", { "_index": 817, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["this.usermodule(data).save", { "_index": 801, "title": {}, "body": { "injectables/UserService.html": {} } }], ["this.usermodule.find", { "_index": 795, "title": {}, "body": { "injectables/UserService.html": {} } }], ["this.userservice.registeruser(body", { "_index": 769, "title": {}, "body": { "controllers/UserController.html": {} } }], ["this.usersservice.findone(name", { "_index": 518, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["throw", { "_index": 417, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {} } }], ["title", { "_index": 15, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/Article.html": {} } }], ["token", { "_index": 489, "title": {}, "body": { "modules/AuthModule.html": {}, "injectables/AuthService.html": {} } }], ["total", { "_index": 288, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["tovalidate", { "_index": 803, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["tovalidate(metatype", { "_index": 805, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["transform", { "_index": 804, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["transform(value", { "_index": 808, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["transformer", { "_index": 814, "title": {}, "body": { "injectables/ValidationPipe.html": {}, "dependencies.html": {} } }], ["transforminterceptor", { "_index": 732, "title": { "injectables/TransformInterceptor.html": {} }, "body": { "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "coverage.html": {} } }], ["trim", { "_index": 191, "title": {}, "body": { "classes/Article.html": {} } }], ["true", { "_index": 146, "title": {}, "body": { "modules/AppModule.html": {}, "classes/Article.html": {}, "controllers/ArticleController.html": {}, "injectables/JwtStrategy.html": {} } }], ["true})@apibody({type", { "_index": 230, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["try", { "_index": 407, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "injectables/UserService.html": {} } }], ["type", { "_index": 16, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "classes/Article.html": {}, "controllers/ArticleController.html": {}, "interfaces/ArticleList.html": {}, "injectables/ArticleService.html": {}, "injectables/AuthService.html": {}, "interfaces/Comment.html": {}, "classes/HttpExceptionFilter.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "classes/Meta.html": {}, "controllers/MetaController.html": {}, "injectables/MetaService.html": {}, "interfaces/Pagination.html": {}, "injectables/PublishService.html": {}, "interfaces/Response.html": {}, "injectables/TransformInterceptor.html": {}, "classes/User.html": {}, "controllers/UserController.html": {}, "injectables/UserService.html": {}, "injectables/ValidationPipe.html": {}, "coverage.html": {}, "classes/userDTO.html": {}, "miscellaneous/variables.html": {} } }], ["type_id`:{$equal", { "_index": 436, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["types", { "_index": 827, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["types.includes(metatype", { "_index": 829, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["type}_id", { "_index": 433, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["ui", { "_index": 892, "title": {}, "body": { "dependencies.html": {} } }], ["unauthorizedexception", { "_index": 580, "title": {}, "body": { "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {} } }], ["undefined", { "_index": 21, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "controllers/ArticleController.html": {}, "classes/Meta.html": {}, "injectables/ValidationPipe.html": {} } }], ["unit", { "_index": 929, "title": {}, "body": { "index.html": {} } }], ["update_time", { "_index": 47, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/Article.html": {}, "injectables/ArticleService.html": {}, "classes/userDTO.html": {} } }], ["updatearticle", { "_index": 219, "title": {}, "body": { "controllers/ArticleController.html": {}, "injectables/ArticleService.html": {} } }], ["updatearticle(@param", { "_index": 300, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["updatearticle(param", { "_index": 253, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["updatearticle(params", { "_index": 373, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["upload", { "_index": 710, "title": {}, "body": { "injectables/PublishService.html": {} } }], ["upload(file", { "_index": 711, "title": {}, "body": { "injectables/PublishService.html": {} } }], ["uploadedfile", { "_index": 694, "title": {}, "body": { "controllers/PublishController.html": {} } }], ["uploadfile", { "_index": 689, "title": {}, "body": { "controllers/PublishController.html": {} } }], ["uploadfile(@uploadedfile", { "_index": 703, "title": {}, "body": { "controllers/PublishController.html": {} } }], ["uploadfile(file", { "_index": 690, "title": {}, "body": { "controllers/PublishController.html": {} } }], ["uri", { "_index": 164, "title": {}, "body": { "modules/AppModule.html": {}, "miscellaneous/variables.html": {} } }], ["url", { "_index": 559, "title": {}, "body": { "classes/HttpExceptionFilter.html": {}, "injectables/PublishService.html": {}, "miscellaneous/variables.html": {} } }], ["usefactory", { "_index": 156, "title": {}, "body": { "modules/AppModule.html": {} } }], ["usefindandmodify", { "_index": 410, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["useguards", { "_index": 264, "title": {}, "body": { "controllers/ArticleController.html": {}, "controllers/MetaController.html": {}, "controllers/PublishController.html": {} } }], ["useguards(authguard('jwt", { "_index": 295, "title": {}, "body": { "controllers/ArticleController.html": {}, "controllers/MetaController.html": {}, "controllers/PublishController.html": {} } }], ["useguards(undefined)@delete(':_id')@apibearerauth", { "_index": 628, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["useguards(undefined)@delete(':id')@apibearerauth()@apiparam({name", { "_index": 234, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["useguards(undefined)@post('upload')@useinterceptors(undefined", { "_index": 691, "title": {}, "body": { "controllers/PublishController.html": {} } }], ["useguards(undefined)@usepipes(new", { "_index": 221, "title": {}, "body": { "controllers/ArticleController.html": {}, "controllers/MetaController.html": {} } }], ["useinterceptors", { "_index": 693, "title": {}, "body": { "controllers/PublishController.html": {} } }], ["useinterceptors(fileinterceptor('file", { "_index": 702, "title": {}, "body": { "controllers/PublishController.html": {} } }], ["usenewurlparser", { "_index": 151, "title": {}, "body": { "modules/AppModule.html": {} } }], ["usepipes", { "_index": 265, "title": {}, "body": { "controllers/ArticleController.html": {}, "controllers/MetaController.html": {}, "controllers/UserController.html": {} } }], ["usepipes(new", { "_index": 296, "title": {}, "body": { "controllers/ArticleController.html": {}, "controllers/MetaController.html": {}, "controllers/UserController.html": {} } }], ["user", { "_index": 122, "title": { "classes/User.html": {} }, "body": { "modules/AppModule.html": {}, "controllers/ArticleController.html": {}, "modules/AuthModule.html": {}, "injectables/AuthService.html": {}, "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "classes/User.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "coverage.html": {}, "index.html": {} } }], ["user.controller", { "_index": 780, "title": {}, "body": { "modules/UserModule.html": {} } }], ["user.dto", { "_index": 766, "title": {}, "body": { "controllers/UserController.html": {} } }], ["user.length", { "_index": 519, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["user.service", { "_index": 764, "title": {}, "body": { "controllers/UserController.html": {}, "modules/UserModule.html": {} } }], ["user/user.module", { "_index": 472, "title": {}, "body": { "modules/AuthModule.html": {} } }], ["user/user.service", { "_index": 512, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["user[0", { "_index": 525, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["user[0].passwd", { "_index": 521, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["user[0].salt", { "_index": 522, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["usercontroller", { "_index": 109, "title": { "controllers/UserController.html": {} }, "body": { "modules/AppModule.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {}, "coverage.html": {} } }], ["userdto", { "_index": 757, "title": { "classes/userDTO.html": {} }, "body": { "controllers/UserController.html": {}, "coverage.html": {}, "classes/userDTO.html": {} } }], ["usermodule", { "_index": 104, "title": { "modules/UserModule.html": {} }, "body": { "modules/AppModule.html": {}, "modules/AuthModule.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "modules.html": {}, "overview.html": {} } }], ["username", { "_index": 957, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["users", { "_index": 782, "title": {}, "body": { "modules/UserModule.html": {} } }], ["userschema", { "_index": 747, "title": {}, "body": { "classes/User.html": {}, "modules/UserModule.html": {}, "coverage.html": {}, "miscellaneous/variables.html": {} } }], ["userservice", { "_index": 495, "title": { "injectables/UserService.html": {} }, "body": { "injectables/AuthService.html": {}, "controllers/UserController.html": {}, "modules/UserModule.html": {}, "injectables/UserService.html": {}, "coverage.html": {}, "overview.html": {} } }], ["usersservice", { "_index": 498, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["utils/cryptogram", { "_index": 514, "title": {}, "body": { "injectables/AuthService.html": {}, "injectables/UserService.html": {} } }], ["utils/log4js", { "_index": 815, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["v0.0.1", { "_index": 906, "title": {}, "body": { "index.html": {} } }], ["validate", { "_index": 571, "title": {}, "body": { "injectables/JwtStrategy.html": {}, "injectables/LocalStrategy.html": {}, "injectables/ValidationPipe.html": {} } }], ["validate(name", { "_index": 597, "title": {}, "body": { "injectables/LocalStrategy.html": {} } }], ["validate(object", { "_index": 821, "title": {}, "body": { "injectables/ValidationPipe.html": {} } }], ["validate(payload", { "_index": 574, "title": {}, "body": { "injectables/JwtStrategy.html": {} } }], ["validatepasswd", { "_index": 492, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["validatepasswd(encryptionpassword", { "_index": 501, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["validateuser", { "_index": 493, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["validateuser(name", { "_index": 506, "title": {}, "body": { "injectables/AuthService.html": {} } }], ["validationpipe", { "_index": 272, "title": { "injectables/ValidationPipe.html": {} }, "body": { "controllers/ArticleController.html": {}, "controllers/MetaController.html": {}, "controllers/UserController.html": {}, "injectables/ValidationPipe.html": {}, "coverage.html": {} } }], ["validationpipe())@apiparam({name", { "_index": 228, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["validationpipe())@post", { "_index": 758, "title": {}, "body": { "controllers/UserController.html": {} } }], ["validationpipe())@post()@apibearerauth", { "_index": 622, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["validationpipe())@post()@apibearerauth()@apibody({type", { "_index": 222, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["validationpipe())@put(':_id')@apibearerauth", { "_index": 625, "title": {}, "body": { "controllers/MetaController.html": {} } }], ["validationpipe())@put(':id')@apibearerauth()@apibody({type", { "_index": 254, "title": {}, "body": { "controllers/ArticleController.html": {} } }], ["validator", { "_index": 40, "title": {}, "body": { "classes/AddArticleDTO.html": {}, "classes/AddCommentDTO.html": {}, "classes/AddMetaDTO.html": {}, "injectables/ValidationPipe.html": {}, "dependencies.html": {}, "classes/userDTO.html": {} } }], ["value", { "_index": 363, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/ValidationPipe.html": {}, "miscellaneous/variables.html": {} } }], ["variable", { "_index": 835, "title": {}, "body": { "coverage.html": {} } }], ["variables", { "_index": 949, "title": { "miscellaneous/variables.html": {} }, "body": { "miscellaneous/variables.html": {} } }], ["vdjxbq@(tmru31yruc%[gef;2osplk", { "_index": 959, "title": {}, "body": { "miscellaneous/variables.html": {} } }], ["views", { "_index": 179, "title": {}, "body": { "classes/Article.html": {}, "injectables/ArticleService.html": {} } }], ["void", { "_index": 546, "title": {}, "body": { "classes/HttpExceptionFilter.html": {}, "injectables/UserService.html": {} } }], ["website", { "_index": 324, "title": {}, "body": { "modules/ArticleModule.html": {}, "interfaces/Comment.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {} } }], ["world", { "_index": 174, "title": {}, "body": { "injectables/AppService.html": {} } }], ["wumao", { "_index": 121, "title": {}, "body": { "modules/AppModule.html": {}, "controllers/ArticleController.html": {}, "modules/ArticleModule.html": {}, "controllers/MetaController.html": {}, "modules/MetaModule.html": {}, "controllers/UserController.html": {}, "miscellaneous/variables.html": {} } }], ["year", { "_index": 453, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["yeararr", { "_index": 438, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["yeararr.findindex(i", { "_index": 442, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["yeararr.push", { "_index": 452, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["yeararr.sort((a", { "_index": 454, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["yeararr[index].list.push(item", { "_index": 447, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["yeararr[index].list.sort((a", { "_index": 448, "title": {}, "body": { "injectables/ArticleService.html": {} } }], ["yes", { "_index": 364, "title": {}, "body": { "injectables/ArticleService.html": {}, "injectables/AuthService.html": {} } }], ["zoom", { "_index": 105, "title": {}, "body": { "modules/AppModule.html": {}, "modules/ArticleModule.html": {}, "modules/AuthModule.html": {}, "modules/MetaModule.html": {}, "modules/PublishModule.html": {}, "modules/UserModule.html": {}, "overview.html": {} } }]], "pipeline": ["stemmer"] },
  "store": { "classes/AddArticleDTO.html": { "url": "classes/AddArticleDTO.html", "title": "class - AddArticleDTO", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddArticleDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/article/article.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                category_id\n                            \n                            \n                                    Readonly\n                                content\n                            \n                            \n                                    Readonly\n                                desc\n                            \n                            \n                                    Readonly\n                                    Optional\n                                tag_id\n                            \n                            \n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            category_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/article/article.dto.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty({message: '内容不能为空'})@ApiProperty({description: '内容', minimum: 1, default: '测试内容'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/article/article.dto.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            desc\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: '描述内容', minimum: 0, default: '我是描述'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/article/article.dto.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            tag_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/article/article.dto.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty({message: '标题不能为空'})@MaxLength(20, {message: '标题长度不能超过20'})@ApiProperty({description: '标题', minimum: 1, default: '测试标题'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/article/article.dto.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, MaxLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nexport class AddArticleDTO {\n  @IsNotEmpty({ message: '标题不能为空' })\n  @MaxLength(20, { message: '标题长度不能超过20' })\n  @ApiProperty({\n    description: '标题',\n    minimum: 1,\n    default: '测试标题',\n  })\n  readonly title: string;\n\n  @IsNotEmpty({ message: '内容不能为空' })\n  @ApiProperty({\n    description: '内容',\n    minimum: 1,\n    default: '测试内容',\n  })\n  readonly content: string;\n  // readonly add_time: string;\n  // readonly update_time: string;\n  // @ApiProperty()\n  @ApiProperty({\n    description: '描述内容',\n    minimum: 0,\n    default: '我是描述',\n  })\n  readonly desc: string;\n\n  // @IsArray()\n  // @ArrayUnique()\n  @ApiProperty({ type: [String] })\n  readonly category_id?: string[];\n\n  // @IsArray()\n  // @ArrayUnique()\n  @ApiProperty({ type: [String] })\n  readonly tag_id?: string[];\n\n  // readonly tag_id: string[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/AddCommentDTO.html": { "url": "classes/AddCommentDTO.html", "title": "class - AddCommentDTO", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddCommentDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/article/comment.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                content\n                            \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MaxLength(100, {message: '超过100字限制了'})@ApiProperty({description: '评论内容', type: 'string', default: '我是评论内容'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/article/comment.dto.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty({message: '邮箱不能为空'})@IsEmail()@ApiProperty({description: '邮箱', minimum: 1, default: '99360774@qq.com'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/article/comment.dto.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty({message: '姓名不能为空'})@ApiProperty({description: '评论人姓名', minimum: 1, default: '五毛'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/article/comment.dto.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, MaxLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nexport class AddCommentDTO {\n  @IsNotEmpty({ message: '姓名不能为空' })\n  @ApiProperty({\n    description: '评论人姓名',\n    minimum: 1,\n    default: '五毛',\n  })\n  readonly name: string;\n\n  @IsNotEmpty({ message: '邮箱不能为空' })\n  @IsEmail()\n  @ApiProperty({\n    description: '邮箱',\n    minimum: 1,\n    default: '99360774@qq.com',\n  })\n  readonly email: string;\n  // readonly add_time: string;\n  // readonly update_time: string;\n  // @ApiProperty()\n  @MaxLength(100, { message: '超过100字限制了' })\n  @ApiProperty({\n    description: '评论内容',\n    type: 'string',\n    default: '我是评论内容',\n  })\n  readonly content: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/AddMetaDTO.html": { "url": "classes/AddMetaDTO.html", "title": "class - AddMetaDTO", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddMetaDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/meta/meta.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                alias\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            alias\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty({message: '别名不能为空'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/meta/meta.dto.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty({message: '名儿不能为空'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/meta/meta.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/meta/meta.dto.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsIn } from 'class-validator';\n\nexport class AddMetaDTO {\n  @IsNotEmpty({ message: '名儿不能为空' })\n  readonly name: string;\n\n  @IsNotEmpty({ message: '别名不能为空' })\n  readonly alias: string;\n\n  @IsIn([1, 2])\n  readonly type: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "controllers/AppController.html": { "url": "controllers/AppController.html", "title": "controller - AppController", "body": "\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  // @Get()\n  // getHello(): string {\n  //   return this.appService.getHello();\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/AppModule.html": { "url": "modules/AppModule.html", "title": "module - AppModule", "body": "\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nArticleModule\n\nArticleModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArticleModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaModule\n\nMetaModule\n\nAppModule -->\n\nMetaModule->AppModule\n\n\n\n\n\nPublishModule\n\nPublishModule\n\nAppModule -->\n\nPublishModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ArticleModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            MetaModule\n                        \n                        \n                            PublishModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*\n * @Author: your name\n * @Date: 2021-01-02 10:59:57\n * @LastEditTime: 2021-02-04 14:53:41\n * @LastEditors: wumao\n * @Description: In User Settings Edit\n * @FilePath: /nest-blog/src/app.module.ts\n */\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ArticleModule } from './module/article/article.module';\nimport { UserModule } from './module/user/user.module';\nimport { AuthModule } from './module/auth/auth.module';\nimport { UserController } from './module/user/user.controller';\nimport { MetaModule } from './module/meta/meta.module';\nimport { PublishModule } from './module/publish/publish.module';\nimport { ConfigModule } from '@nestjs/config';\nimport configuration from './config/configuration';\n\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ envFilePath: `./src/config/${process.env.NODE_ENV}.env`, load: [configuration], isGlobal: true, ignoreEnvFile: false, },),\n    MongooseModule.forRoot(\n      process.env.DATABASE_URL, {\n      useNewUrlParser: true,\n      user: `${process.env.DATABASE_USER}`,\n      pass: `${process.env.DATABASE_PASSWD}`,\n    }),\n    // MongooseModule.forRootAsync({\n    //   imports: [ConfigModule],\n    //   useFactory: async (configService: ConfigService) => {\n    //     // console.log(configService.get('DATABASE_URL'));\n    //     console.log(process.env.DATABASE_URL);\n    //     setTimeout(() => {\n    //       console.log(configuration());\n    //     }, 3000)\n\n    //     return {\n    //       uri: configService.get('DATABASE_URL'),\n    //     }\n    //   },\n    //   inject: [ConfigService],\n    // }),\n    ArticleModule,\n    UserModule,\n    AuthModule,\n    MetaModule,\n    PublishModule,\n  ],\n  controllers: [AppController, UserController],\n  providers: [AppService],\n})\n\n\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/AppService.html": { "url": "injectables/AppService.html", "title": "injectable - AppService", "body": "\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/Article.html": { "url": "classes/Article.html", "title": "class - Article", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Article\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schema/article.schema.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                add_time\n                            \n                            \n                                category_id\n                            \n                            \n                                comment\n                            \n                            \n                                content\n                            \n                            \n                                desc\n                            \n                            \n                                headPic\n                            \n                            \n                                tag_id\n                            \n                            \n                                title\n                            \n                            \n                                update_time\n                            \n                            \n                                views\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            add_time\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schema/article.schema.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            category_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Meta[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schema/article.schema.ts:55\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            comment\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schema/article.schema.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schema/article.schema.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            desc\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schema/article.schema.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            headPic\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schema/article.schema.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tag_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Meta[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schema/article.schema.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop({type: String, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schema/article.schema.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            update_time\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schema/article.schema.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            views\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schema/article.schema.ts:37\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport * as mongoose from 'mongoose';\nimport { Meta } from './meta.schema';\n\n@Schema()\nexport class Article {\n  @Prop({\n    type: String,\n    trim: true,\n  })\n  title: string;\n\n  @Prop()\n  content: string;\n\n  // @Prop()\n  // author_id: string;\n\n  @Prop()\n  desc: string;\n\n  @Prop()\n  headPic: string;\n\n  @Prop()\n  add_time: number;\n\n  @Prop()\n  views: number;\n\n  @Prop()\n  update_time: number;\n\n  // @Prop()\n  // hidden: number;\n\n  @Prop([])\n  comment: [];\n\n\n  @Prop([\n    {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'Meta',\n    },\n  ])\n  category_id: Meta[];\n\n  @Prop([\n    {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'Meta',\n    },\n  ])\n  tag_id: Meta[];\n\n  // 文章分类\n  // @IsArray()\n  // @ArrayNotEmpty({ message: '文章分类？' })\n  // @ArrayUnique()\n  // @prop({ ref: () => Category, required: true, index: true })\n  // category: Ref[];\n}\n\nexport const ArticleSchema = SchemaFactory.createForClass(Article);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "controllers/ArticleController.html": { "url": "controllers/ArticleController.html", "title": "controller - ArticleController", "body": "\n                   \n\n\n\n\n\n\n  Controllers\n  ArticleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/article/article.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                article\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addArticle\n                            \n                            \n                                comment\n                            \n                            \n                                deleteArticle\n                            \n                            \n                                getArchive\n                            \n                            \n                                getList\n                            \n                            \n                                hotList\n                            \n                            \n                                    Async\n                                list\n                            \n                            \n                                readArticle\n                            \n                            \n                                    Async\n                                updateArticle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addArticle\n                        \n                        \n                    \n                \n            \n            \n                \naddArticle(body: AddArticleDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@UsePipes(new ValidationPipe())@Post()@ApiBearerAuth()@ApiBody({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/module/article/article.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AddArticleDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            comment\n                        \n                        \n                    \n                \n            \n            \n                \ncomment(param: any, body: AddCommentDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:id/comments/')@UsePipes(new ValidationPipe())@ApiParam({name: '文章ID', required: true})@ApiBody({type: AddCommentDTO})\n                \n            \n\n            \n                \n                    Defined in src/module/article/article.controller.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                AddCommentDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteArticle\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteArticle(Param: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Delete(':id')@ApiBearerAuth()@ApiParam({name: '文章ID'})\n                \n            \n\n            \n                \n                    Defined in src/module/article/article.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    Param\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getArchive\n                        \n                        \n                    \n                \n            \n            \n                \ngetArchive()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/archive')\n                \n            \n\n            \n                \n                    Defined in src/module/article/article.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getList\n                        \n                        \n                    \n                \n            \n            \n                \ngetList(param: any, pageInfo: Pagination)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/meta/:type/:_id')\n                \n            \n\n            \n                \n                    Defined in src/module/article/article.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageInfo\n                                    \n                                                Pagination\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hotList\n                        \n                        \n                    \n                \n            \n            \n                \nhotList(param: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/hot/:length')\n                \n            \n\n            \n                \n                    Defined in src/module/article/article.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            list\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    list(queryInfo: ArticleList)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/module/article/article.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryInfo\n                                    \n                                                ArticleList\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            readArticle\n                        \n                        \n                    \n                \n            \n            \n                \nreadArticle(param: Article)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':_id')\n                \n            \n\n            \n                \n                    Defined in src/module/article/article.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                                Article\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateArticle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticle(param: any, body: AddArticleDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@UsePipes(new ValidationPipe())@Put(':id')@ApiBearerAuth()@ApiBody({type: undefined})\n                \n            \n\n            \n                \n                    Defined in src/module/article/article.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                AddArticleDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /*\n * @Author: your name\n * @Date: 2021-01-02 12:05:04\n * @LastEditTime: 2021-02-07 17:54:34\n * @LastEditors: wumao\n * @Description: In User Settings Edit\n * @FilePath: /nest-blog/src/module/article/article.controller.ts\n */\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n  UsePipes,\n} from '@nestjs/common';\nimport { ArticleService } from './article.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ArticleList, Pagination } from '../../interface/pagination.interface';\nimport { Article } from 'src/interface/article.interface';\nimport { ValidationPipe } from '../../pipe/validation.pipe';\nimport { AddArticleDTO } from './article.dto';\nimport { AddCommentDTO } from './comment.dto';\nimport { ApiBody, ApiBearerAuth, ApiParam } from '@nestjs/swagger';\nimport { type } from 'os';\n\n@Controller('article')\nexport class ArticleController {\n  constructor(private ArticleService: ArticleService) { }\n\n  //文章列表以及分页\n  @Get()\n  async list(@Query() queryInfo: ArticleList) {\n    // console.log(queryInfo);\n\n    const { pageCurrent = 1, pageSize = 10 } = queryInfo;\n    const articleList = await this.ArticleService.findAll(queryInfo);\n    const total = await this.ArticleService.findAll(queryInfo, true);;\n    return {\n      items: articleList,\n      pageInfo: { total, pageCurrent: +pageCurrent, pageSize: +pageSize },\n    };\n  }\n\n  @Get('/archive')\n  getArchive() {\n    return this.ArticleService.archive()\n  }\n\n\n  //获取热门文章\n  @Get('/hot/:length')\n  hotList(@Param() param: string) {\n    return this.ArticleService.getHotArticlesList(+param.length)\n  }\n\n  //读文章\n  @Get(':_id')\n  readArticle(@Param() param: Article) {\n    return this.ArticleService.findOne(param._id);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @UsePipes(new ValidationPipe())\n  @Post()\n  @ApiBearerAuth()\n  @ApiBody({ type: [AddArticleDTO] })\n  addArticle(@Body() body: AddArticleDTO) {\n    return this.ArticleService.addData(body);\n  }\n\n  //修改\n  @UseGuards(AuthGuard('jwt'))\n  @UsePipes(new ValidationPipe())\n  @Put(':id')\n  @ApiBearerAuth()\n  @ApiBody({ type: [AddArticleDTO] })\n  async updateArticle(@Param() param: any, @Body() body: AddArticleDTO) {\n    const result = await this.ArticleService.updateArticle(\n      { _id: param.id },\n      body,\n    );\n    return result;\n  }\n\n  //删除文章\n  @UseGuards(AuthGuard('jwt'))\n  @Delete(':id')\n  @ApiBearerAuth()\n  @ApiParam({ name: '文章ID' })\n  deleteArticle(@Param() Param: any) {\n    return this.ArticleService.deleteArticle(Param.id);\n  }\n\n  //评论\n  @Post('/:id/comments/')\n  @UsePipes(new ValidationPipe())\n  @ApiParam({ name: '文章ID', required: true })\n  @ApiBody({ type: AddCommentDTO })\n  comment(@Param() param: any, @Body() body: AddCommentDTO) {\n    return this.ArticleService.addComment(param.id, body);\n  }\n\n  //根据标签ID查询查询文章列表带分页\n  @Get('/meta/:type/:_id')\n  getList(@Param() param: any, @Query() pageInfo: Pagination) {\n    const { type, _id } = param\n    return this.ArticleService.getMetaArticleList(type, _id, pageInfo)\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "interfaces/ArticleList.html": { "url": "interfaces/ArticleList.html", "title": "interface - ArticleList", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ArticleList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interface/pagination.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Pagination\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        categoryId\n                                \n                                \n                                            Optional\n                                        tagId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        categoryId\n                                    \n                                \n                                \n                                    \n                                        categoryId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tagId\n                                    \n                                \n                                \n                                    \n                                        tagId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Pagination {\n  pageSize?: number;\n  pageCurrent?: number;\n}\n\nexport interface ArticleList extends Pagination {\n  tagId?: string;\n  categoryId?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/ArticleModule.html": { "url": "modules/ArticleModule.html", "title": "module - ArticleModule", "body": "\n                   \n\n\n\n\n    Modules\n    ArticleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ArticleModule\n\n\n\ncluster_ArticleModule_providers\n\n\n\n\nArticleService\n\nArticleService\n\n\n\nArticleModule\n\nArticleModule\n\nArticleModule -->\n\nArticleService->ArticleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/article/article.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ArticleService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ArticleController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*\n * @Author: wumao\n * @Date: 2021-01-02 12:04:38\n * @LastEditTime: 2021-02-07 18:00:01\n * @LastEditors: wumao\n * @Description:\n * @FilePath: /nest-blog/src/module/article/article.module.ts\n * @website: https://www.wumao.org\n */\nimport { Module } from '@nestjs/common';\nimport { ArticleController } from './article.controller';\n\n//配置数据库模型\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ArticleSchema } from '../../schema/article.schema';\nimport { MetaSchema } from '../../schema/meta.schema';\nimport { ArticleService } from './article.service';\n// import moment from 'moment';\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: 'Article',\n        schema: ArticleSchema,\n        collection: 'articles',\n      },\n    ]),\n    MongooseModule.forFeature([\n      {\n        name: 'Meta',\n        schema: MetaSchema,\n        collection: 'metas',\n      },\n    ]),\n  ],\n  controllers: [ArticleController],\n  providers: [ArticleService],\n})\nexport class ArticleModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/ArticleService.html": { "url": "injectables/ArticleService.html", "title": "injectable - ArticleService", "body": "\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ArticleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/article/article.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                addData\n                            \n                            \n                                    Async\n                                archive\n                            \n                            \n                                    Async\n                                deleteArticle\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findCount\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getHotArticlesList\n                            \n                            \n                                    Async\n                                getMetaArticleList\n                            \n                            \n                                    Async\n                                updateArticle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ArticleModel, MetaModel)\n                    \n                \n                        \n                            \n                                Defined in src/module/article/article.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ArticleModel\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        MetaModel\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addComment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(id: string, body: any)\n                \n            \n\n\n            \n                \n                    Defined in src/module/article/article.service.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addData(params: Article)\n                \n            \n\n\n            \n                \n                    Defined in src/module/article/article.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                Article\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            archive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    archive()\n                \n            \n\n\n            \n                \n                    Defined in src/module/article/article.service.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteArticle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticle(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/article/article.service.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(params: ArticleList, getTotal?: boolean, fields?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/article/article.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                ArticleList\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    getTotal\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    fields\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findCount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findCount()\n                \n            \n\n\n            \n                \n                    Defined in src/module/article/article.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/article/article.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getHotArticlesList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getHotArticlesList(length: number)\n                \n            \n\n\n            \n                \n                    Defined in src/module/article/article.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMetaArticleList\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMetaArticleList(type, _id, pageInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/module/article/article.service.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    _id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageInfo\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateArticle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticle(params: Article, params2: Article)\n                \n            \n\n\n            \n                \n                    Defined in src/module/article/article.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                Article\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params2\n                                    \n                                                Article\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotAcceptableException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Article } from '../../interface/article.interface';\nimport { ArticleList } from '../../interface/pagination.interface';\nimport { getDefaultOptions } from './article.model';\nimport * as dayjs from 'dayjs'\n// import { Inject } from '@nestjs/common';\n\n@Injectable()\nexport class ArticleService {\n  constructor(\n    @InjectModel('Article') private ArticleModel,\n    @InjectModel('Meta') private MetaModel,\n    // @Inject('moment') private moment: moment.Moment\n  ) { }\n\n  //获取最热的文章\n  async getHotArticlesList(length: number): Promise {\n    return await this.ArticleModel.find({ views: { $gt: 20 } }).sort({ views: -1 }).limit(length)\n  }\n\n  //查询列表带分页\n  async findAll(\n    params: ArticleList = {},\n    getTotal?: boolean,\n    fields?: string,\n  ): Promise {\n    const { pageSize = 10, pageCurrent = 1, tagId, categoryId } = params;\n    let searchParams = { tag_id: tagId, category_id: categoryId }\n    searchParams = JSON.parse(JSON.stringify(searchParams))\n    const searchParamsTemp = {}\n    for (const key in searchParams) {\n      searchParamsTemp[key] = {\n        $elemMatch: { $eq: searchParams[key] }\n      }\n    }\n    if (getTotal) {\n      return await this.ArticleModel.find(searchParamsTemp, fields).countDocuments()\n    } else {\n      return await this.ArticleModel.find(searchParamsTemp, fields)\n        .select('-content')\n        .populate('category_id')\n        .populate(\"tag_id\")\n        .sort({ _id: -1 })\n        .skip((pageCurrent - 1) * pageSize)\n        .limit(+pageSize);\n    }\n\n  }\n\n  //查找文章\n  async findOne(id: string): Promise {\n    try {\n      const article = await this.ArticleModel.findOneAndUpdate(\n        { _id: id },\n        { $inc: { views: 1 } },\n        { useFindAndModify: false },\n      ).populate('category_id').populate(\"tag_id\").exec();\n      return {\n        msg: 'success',\n        articleData: article,\n      };\n    } catch (error) {\n      throw new NotFoundException({\n        message: '找不到这篇文章',\n      });\n    }\n  }\n\n  //查询文章数量\n  async findCount(): Promise {\n    return await this.ArticleModel.countDocuments();\n  }\n\n  //增加数据\n  async addData(params: Article): Promise {\n    const data = { ...params, ...getDefaultOptions() };\n    console.log(data);\n\n    try {\n      await this.ArticleModel({ ...params, ...getDefaultOptions() }).save();\n      return { msg: '添加成功' };\n    } catch (error) {\n      throw new NotAcceptableException({ message: error.message });\n    }\n  }\n\n  //修改数据\n  async updateArticle(\n    params: Article,\n    params2: Article,\n  ): Promise {\n    await this.ArticleModel.updateOne(params, {\n      ...params2,\n      update_time: Date.now(),\n    });\n    return {\n      msg: '恭喜您,修改成功',\n    };\n  }\n\n  //删除数据\n  async deleteArticle(id: string): Promise {\n    const data = { _id: id };\n    console.log(22);\n    console.log(data);\n\n    const result = await this.ArticleModel.updateOne(\n      { _id: id },\n      { hidden: 1 },\n    );\n    console.log(result);\n    return {\n      mag: '恭喜您,删除成功',\n    };\n  }\n\n  //添加评论\n  async addComment(id: string, body: any): Promise {\n    try {\n      await this.ArticleModel.findOneAndUpdate(\n        { _id: id },\n        { $push: { comment: body } },\n        { useFindAndModify: false },\n      );\n      return {\n        msg: '评论成功',\n      };\n    } catch (error) { }\n  }\n\n  //查找分类或者标签下的文章\n  async getMetaArticleList(type, _id, pageInfo): Promise {\n    const { pageSize = 10, pageCurrent = 1 } = pageInfo;\n    const res = await this.ArticleModel.find({ [`${type}_id`]: { $elemMatch: { $eq: _id } } }).select('-content')\n      .skip((pageCurrent - 1) * pageSize)\n      .limit(+pageSize);\n    console.log(res);\n    return res\n\n    // this.ArticleModel.where({ `type_id`:{$equal:}})\n\n\n  }\n\n  // 获取文章归档\n  async archive() {\n    const res = await this.ArticleModel.find()\n      .select('title add_time')\n    const yearArr = []\n    res.forEach(item => {\n      const itemYear = dayjs(+item.add_time).year()\n      const index = yearArr.findIndex(i => i.year === itemYear)\n      // const item2 = { ...item }\n      // delete item2.add_time\n      if (index > -1) {\n        yearArr[index].list.push(item)\n        yearArr[index].list.sort((a, b) => b.add_time - a.add_time)\n      } else {\n        yearArr.push({\n          year: +itemYear,\n          list: [item]\n        })\n      }\n    })\n    yearArr.sort((a, b) => b.year - a.year)\n    return yearArr\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/AuthModule.html": { "url": "modules/AuthModule.html", "title": "module - AuthModule", "body": "\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*\n * @Author: your name\n * @Date: 2021-01-02 23:03:44\n * @LastEditTime: 2021-01-03 19:18:50\n * @LastEditors: Please set LastEditors\n * @Description: In User Settings Edit\n * @FilePath: /nest-blog/src/module/auth/auth.module.ts\n */\nimport { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UserModule } from '../user/user.module';\nimport { JwtStrategy } from './jwt.strategy';\nimport { LocalStrategy } from './local.strategy';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JWT_CONFIG } from '../../app.config';\n``;\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      secret: JWT_CONFIG.secret,\n      signOptions: { expiresIn: '30d' }, // token 过期时效\n    }),\n    UserModule,\n  ],\n  providers: [JwtStrategy, LocalStrategy, AuthService],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/AuthService.html": { "url": "injectables/AuthService.html", "title": "injectable - AuthService", "body": "\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                明文\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                certificate\n                            \n                            \n                                validatePasswd\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/module/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            certificate\n                        \n                        \n                    \n                \n            \n            \n                \ncertificate(params: any)\n                \n            \n\n\n            \n                \n                    Defined in src/module/auth/auth.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { token: any; msg: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validatePasswd\n                        \n                        \n                    \n                \n            \n            \n                \nvalidatePasswd(encryptionPassword: string, plainTextPassword: string, salt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/auth/auth.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    encryptionPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(name: string, passwd: string, JwtStrategy?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/module/auth/auth.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    passwd\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    JwtStrategy\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            明文\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/module/auth/auth.service.ts:21\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\nimport { UserService } from '../user/user.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { encryptPassword } from '../../utils/cryptogram';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly usersService: UserService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  明文;\n  //校验密码是否相等\n  validatePasswd(\n    encryptionPassword: string,\n    plainTextPassword: string,\n    salt: string,\n  ) {\n    return encryptionPassword === encryptPassword(plainTextPassword, salt);\n  }\n\n  //校验用户\n  async validateUser(\n    name: string,\n    passwd: string,\n    JwtStrategy?: boolean,\n  ): Promise {\n    console.log('JWT验证 - Step 2: 校验用户信息');\n    const user = await this.usersService.findOne(name);\n    if (user.length === 1) {\n      const hashedPassword = user[0].passwd;\n      const salt = user[0].salt;\n      // 通过密码盐，加密传参，再与数据库里的比较，判断是否相等\n      const hashPassword = encryptPassword(passwd, salt);\n      if (hashedPassword === hashPassword) {\n        // 密码正确\n        if (JwtStrategy) {\n          return user[0];\n        }\n        return this.certificate({ name, passwd });\n      } else {\n        // 密码错误\n        throw new HttpException(\n          {\n            message: '小伙子,密码有问题啊',\n            status: HttpStatus.FORBIDDEN,\n          },\n          403,\n        );\n      }\n    }\n    // 查无此人\n    throw new HttpException(\n      {\n        message: '小伙子,名字写错了吧?',\n        status: HttpStatus.FORBIDDEN,\n      },\n      403,\n    );\n  }\n\n  // JWT验证 - 颁发证书\n  certificate(params: any) {\n    const payload = {\n      name: params.name,\n      passwd: params.passwd,\n    };\n    console.log('JWT验证 - Step 3: 处理 jwt 签证');\n    try {\n      const token = this.jwtService.sign(payload);\n      return {\n        token,\n        msg: `恭喜您,登录成功`,\n      };\n    } catch (error) {\n      throw new HttpException(\n        {\n          message: '服务器错误',\n          status: HttpStatus.FORBIDDEN,\n        },\n        403,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "interfaces/Comment.html": { "url": "interfaces/Comment.html", "title": "interface - Comment", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interface/comment.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        comment\n                                \n                                \n                                        email\n                                \n                                \n                                        name\n                                \n                                \n                                            Optional\n                                        website\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        comment\n                                    \n                                \n                                \n                                    \n                                        comment:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        website\n                                    \n                                \n                                \n                                    \n                                        website:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Comment {\n  name: string;\n  email: string;\n  website?: string;\n  comment: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/HttpExceptionFilter.html": { "url": "classes/HttpExceptionFilter.html", "title": "class - HttpExceptionFilter", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/http-exception.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/filters/http-exception.filter.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n\n    const message = exception.message;\n    Logger.log('错误提示', message);\n    const errorResponse = {\n      // data: {\n      //   error: message,\n      // },\n      msg: message,\n      code: 0, // 自定义code\n      url: request.originalUrl, // 错误的url地址\n    };\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n    // 设置返回的状态码、请求头、发送错误信息\n    response.status(status);\n    response.header('Content-Type', 'application/json; charset=utf-8');\n    response.send(errorResponse);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/JwtStrategy.html": { "url": "injectables/JwtStrategy.html", "title": "injectable - JwtStrategy", "body": "\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(AuthService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/module/auth/jwt.strategy.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        AuthService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/module/auth/jwt.strategy.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JWT_CONFIG } from '../../app.config';\nimport { AuthService } from './auth.service.js';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private AuthService: AuthService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: JWT_CONFIG.secret,\n    });\n  }\n\n  // JWT验证 - Step 4: 被守卫调用\n  async validate(payload: any) {\n    console.log(11);\n\n    console.log(payload);\n\n    const user = await this.AuthService.validateUser(\n      payload.name,\n      payload.passwd,\n      true,\n    );\n    console.log(user);\n\n    if (!user) {\n      throw new UnauthorizedException({\n        message: '没有权限',\n      });\n    }\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/LocalStrategy.html": { "url": "injectables/LocalStrategy.html", "title": "injectable - LocalStrategy", "body": "\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/auth/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/module/auth/local.strategy.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(name: string, passwd: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/auth/local.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    passwd\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super();\n  }\n\n  async validate(name: string, passwd: string): Promise {\n    const user = await this.authService.validateUser(name, passwd);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/Meta.html": { "url": "classes/Meta.html", "title": "class - Meta", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Meta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schema/meta.schema.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                    Optional\n                                article_list\n                            \n                            \n                                desc\n                            \n                            \n                                name\n                            \n                            \n                                order\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            alias\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop(String)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schema/meta.schema.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            article_list\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Article[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop({type: undefined, ref: 'Article'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schema/meta.schema.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            desc\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop(String)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schema/meta.schema.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop(String)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schema/meta.schema.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            order\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop(Number)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schema/meta.schema.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop(Number)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schema/meta.schema.ts:22\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport * as mongoose from 'mongoose';\nimport { Article } from './article.schema'\n\n@Schema()\nexport class Meta {\n  // @Prop()\n  // sort: number\n\n  //1是tag，2是category\n  @Prop(Number)\n  type: number;\n\n  @Prop(String)\n  name: string;\n\n  @Prop(String)\n  alias?: string;\n\n  @Prop(String)\n  desc: string;\n\n  @Prop(Number)\n  order: number;\n\n  @Prop({\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Article',\n  })\n  article_list?: Article[]\n}\n\nexport const MetaSchema = SchemaFactory.createForClass(Meta);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "controllers/MetaController.html": { "url": "controllers/MetaController.html", "title": "controller - MetaController", "body": "\n                   \n\n\n\n\n\n\n  Controllers\n  MetaController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/meta/meta.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addMeta\n                            \n                            \n                                changeMeta\n                            \n                            \n                                deleteMeta\n                            \n                            \n                                getMta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addMeta\n                        \n                        \n                    \n                \n            \n            \n                \naddMeta(body: AddMetaDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@UsePipes(new ValidationPipe())@Post()@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/module/meta/meta.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AddMetaDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            changeMeta\n                        \n                        \n                    \n                \n            \n            \n                \nchangeMeta(param: any, body: AddMetaDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@UsePipes(new ValidationPipe())@Put(':_id')@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/module/meta/meta.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                                AddMetaDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteMeta\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteMeta(param: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Delete(':_id')@ApiBearerAuth()\n                \n            \n\n            \n                \n                    Defined in src/module/meta/meta.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMta\n                        \n                        \n                    \n                \n            \n            \n                \ngetMta(param: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':type')\n                \n            \n\n            \n                \n                    Defined in src/module/meta/meta.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    param\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /*\n * @Author: wumao\n * @Date: 2021-01-04 16:54:00\n * @LastEditTime: 2021-01-17 15:01:35\n * @LastEditors: wumao\n * @Description:\n * @FilePath: /nest-blog/src/module/meta/meta.controller.ts\n * @website: https://www.wumao.org\n */\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  UseGuards,\n  UsePipes,\n} from '@nestjs/common';\nimport { MetaService } from './meta.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ValidationPipe } from '../../pipe/validation.pipe';\nimport { AddMetaDTO } from './meta.dto';\nimport { ApiBearerAuth } from '@nestjs/swagger';\n\n@Controller('meta')\nexport class MetaController {\n  constructor(private MetaService: MetaService) {}\n  @Get(':type')\n  getMta(@Param() param: { type: string }) {\n    return this.MetaService.getMeta(param.type);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @UsePipes(new ValidationPipe())\n  @Post()\n  @ApiBearerAuth()\n  addMeta(@Body() body: AddMetaDTO) {\n    return this.MetaService.addMeta(body);\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Delete(':_id')\n  @ApiBearerAuth()\n  deleteMeta(@Param() param: any) {\n    return this.MetaService.deleteMeta(param._id);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @UsePipes(new ValidationPipe())\n  @Put(':_id')\n  @ApiBearerAuth()\n  changeMeta(@Param() param: any, @Body() body: AddMetaDTO) {\n    return this.MetaService.changeMeta(param._id, body);\n  }\n\n  // @Get('/article/:_id')\n  // articleList(@Param() param: string) {\n  //   console.log(1);\n\n  //   return this.MetaService.getArticleList(param)\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/MetaModule.html": { "url": "modules/MetaModule.html", "title": "module - MetaModule", "body": "\n                   \n\n\n\n\n    Modules\n    MetaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaModule\n\n\n\ncluster_MetaModule_providers\n\n\n\n\nMetaService\n\nMetaService\n\n\n\nMetaModule\n\nMetaModule\n\nMetaModule -->\n\nMetaService->MetaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/meta/meta.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*\n * @Author: wumao\n * @Date: 2021-01-04 16:49:47\n * @LastEditTime: 2021-01-04 22:02:39\n * @LastEditors: wumao\n * @Description:\n * @FilePath: /nest-blog/src/module/meta/meta.module.ts\n * @website: https://www.wumao.org\n */\nimport { Module } from '@nestjs/common';\nimport { MetaController } from './meta.controller';\nimport { MetaService } from './meta.service';\nimport { MetaSchema } from '../../schema/meta.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: 'Meta',\n        schema: MetaSchema,\n        collection: 'metas',\n      },\n    ]),\n  ],\n  controllers: [MetaController],\n  providers: [MetaService],\n})\nexport class MetaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/MetaService.html": { "url": "injectables/MetaService.html", "title": "injectable - MetaService", "body": "\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MetaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/meta/meta.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMeta\n                            \n                            \n                                    Async\n                                changeMeta\n                            \n                            \n                                    Async\n                                deleteMeta\n                            \n                            \n                                    Async\n                                getMeta\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(MetaModel)\n                    \n                \n                        \n                            \n                                Defined in src/module/meta/meta.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        MetaModel\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addMeta\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addMeta(body)\n                \n            \n\n\n            \n                \n                    Defined in src/module/meta/meta.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            changeMeta\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changeMeta(_id: string, body)\n                \n            \n\n\n            \n                \n                    Defined in src/module/meta/meta.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteMeta\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMeta(_id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/meta/meta.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMeta\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMeta(type: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/meta/meta.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\n\n@Injectable()\nexport class MetaService {\n  constructor(@InjectModel('Meta') private MetaModel) {}\n  //查所有\n  async getMeta(type: string): Promise {\n    return await this.MetaModel.find({ type: +type });\n  }\n\n  //增加单个标签\n  async addMeta(body) {\n    await this.MetaModel({\n      ...body,\n    }).save();\n\n    return {\n      msg: '添加标签成功',\n    };\n  }\n\n  async deleteMeta(_id: string) {\n    const result = await this.MetaModel.deleteOne({ _id });\n    console.log(result);\n    if (result.deletedCount === 1) {\n      return { msg: '删除成功' };\n    }\n  }\n  async changeMeta(_id: string, body) {\n    await this.MetaModel.findOneAndUpdate({ _id }, body);\n    // console.log(result);\n    // if (result.deletedCount === 1) {\n    return { msg: '修改成功' };\n    // }\n  }\n\n  // async getArticleList(_id: string,body:any) {\n  //   console.log(_id);\n  //   const { pageSize = 10, pageCurrent = 1 } = body;\n  //   const res = await this.MetaModel.findOne({ _id }).populate({ path: 'article_list', select: 'content' }).\n  //   console.log(res);\n\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "interfaces/Pagination.html": { "url": "interfaces/Pagination.html", "title": "interface - Pagination", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Pagination\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interface/pagination.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        pageCurrent\n                                \n                                \n                                            Optional\n                                        pageSize\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        pageCurrent\n                                    \n                                \n                                \n                                    \n                                        pageCurrent:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageSize\n                                    \n                                \n                                \n                                    \n                                        pageSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Pagination {\n  pageSize?: number;\n  pageCurrent?: number;\n}\n\nexport interface ArticleList extends Pagination {\n  tagId?: string;\n  categoryId?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "controllers/PublishController.html": { "url": "controllers/PublishController.html", "title": "controller - PublishController", "body": "\n                   \n\n\n\n\n\n\n  Controllers\n  PublishController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/publish/publish.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                publish\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            uploadFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadFile(file)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('upload')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/module/publish/publish.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UseInterceptors,\n  UploadedFile,\n  UseGuards,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { PublishService } from './publish.service';\nimport { AuthGuard } from '@nestjs/passport';\n@Controller('publish')\nexport class PublishController {\n  constructor(private PublishService: PublishService) {}\n\n  @UseGuards(AuthGuard('jwt'))\n  @Post('upload')\n  @UseInterceptors(FileInterceptor('file'))\n  async uploadFile(@UploadedFile() file) {\n    return this.PublishService.upload(file);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/PublishModule.html": { "url": "modules/PublishModule.html", "title": "module - PublishModule", "body": "\n                   \n\n\n\n\n    Modules\n    PublishModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PublishModule\n\n\n\ncluster_PublishModule_providers\n\n\n\n\nPublishService\n\nPublishService\n\n\n\nPublishModule\n\nPublishModule\n\nPublishModule -->\n\nPublishService->PublishModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/publish/publish.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PublishService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PublishController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PublishService } from './publish.service';\nimport { PublishController } from './publish.controller';\n\n@Module({\n  providers: [PublishService],\n  controllers: [PublishController],\n})\nexport class PublishModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/PublishService.html": { "url": "injectables/PublishService.html", "title": "injectable - PublishService", "body": "\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PublishService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/publish/publish.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            upload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    upload(file: any)\n                \n            \n\n\n            \n                \n                    Defined in src/module/publish/publish.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as oss from 'ali-oss';\nimport { OSS_CONFIG } from '../../app.config';\n\n@Injectable()\nexport class PublishService {\n  async upload(file: any) {\n    const client = new oss(OSS_CONFIG);\n    const result = await client.put(\n      `${Date.now()}.${file.originalname.split('.').slice(-1)}`,\n      file.buffer,\n    );\n    return {\n      message: '上传成功',\n      url: OSS_CONFIG.url + result.name,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "interfaces/Response.html": { "url": "interfaces/Response.html", "title": "interface - Response", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptor/transform.interceptor.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  CallHandler,\n  ExecutionContext,\n} from '@nestjs/common';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\ninterface Response {\n  data: T;\n}\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor> {\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(\n      map((data) => {\n        return {\n          data,\n          code: 1,\n          msg: '请求成功',\n        };\n      }),\n    );\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/TransformInterceptor.html": { "url": "injectables/TransformInterceptor.html", "title": "injectable - TransformInterceptor", "body": "\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptor/transform.interceptor.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            intercept\n                        \n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptor/transform.interceptor.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  CallHandler,\n  ExecutionContext,\n} from '@nestjs/common';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\ninterface Response {\n  data: T;\n}\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor> {\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(\n      map((data) => {\n        return {\n          data,\n          code: 1,\n          msg: '请求成功',\n        };\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/User.html": { "url": "classes/User.html", "title": "class - User", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schema/users.schema.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                create_time\n                            \n                            \n                                    Optional\n                                email\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                passwd\n                            \n                            \n                                salt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            create_time\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop(String)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schema/users.schema.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop(String)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schema/users.schema.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop(String)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schema/users.schema.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            passwd\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop(String)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schema/users.schema.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            salt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop(String)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schema/users.schema.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\n\n@Schema()\nexport class User {\n  @Prop(String)\n  name: string;\n\n  @Prop(String)\n  passwd?: string;\n\n  @Prop(String)\n  create_time?: string;\n\n  @Prop(String)\n  email?: string;\n\n  @Prop(String)\n  salt: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "controllers/UserController.html": { "url": "controllers/UserController.html", "title": "controller - UserController", "body": "\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginInfo: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/module/user/user.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginInfo\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            register\n                        \n                        \n                    \n                \n            \n            \n                \nregister(body: userDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UsePipes(new ValidationPipe())@Post()\n                \n            \n\n            \n                \n                    Defined in src/module/user/user.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                userDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /*\n * @Author: your name\n * @Date: 2021-01-02 15:03:02\n * @LastEditTime: 2021-01-06 02:24:13\n * @LastEditors: wumao\n * @Description: In User Settings Edit\n * @FilePath: /nest-blog/src/module/user/user.controller.ts\n */\n\nimport { Body, Controller, Post, UsePipes } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { AuthService } from '../auth/auth.service';\nimport { ValidationPipe } from '../../pipe/validation.pipe';\nimport { userDTO } from './user.dto';\n@Controller('user')\nexport class UserController {\n  constructor(\n    private userService: UserService,\n    private authService: AuthService,\n  ) {}\n\n  @UsePipes(new ValidationPipe())\n  @Post()\n  register(@Body() body: userDTO) {\n    return this.userService.registerUser(body);\n  }\n\n  @Post('/login')\n  async login(@Body() loginInfo: any) {\n    console.log('JWT验证 - Step 1: 用户请求登录');\n    return await this.authService.validateUser(\n      loginInfo.name,\n      loginInfo.passwd,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules/UserModule.html": { "url": "modules/UserModule.html", "title": "module - UserModule", "body": "\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*\n * @Author: your name\n * @Date: 2021-01-02 15:02:43\n * @LastEditTime: 2021-01-03 01:21:03\n * @LastEditors: Please set LastEditors\n * @Description: In User Settings Edit\n * @FilePath: /nest-blog/src/module/user/user.module.ts\n */\nimport { Module } from '@nestjs/common';\n// import { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { UserSchema } from '../../schema/users.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: 'User',\n        schema: UserSchema,\n        collection: 'users',\n      },\n    ]),\n  ],\n  // controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/UserService.html": { "url": "injectables/UserService.html", "title": "injectable - UserService", "body": "\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                registerUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModule)\n                    \n                \n                        \n                            \n                                Defined in src/module/user/user.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModule\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            registerUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    registerUser(requestBody: User)\n                \n            \n\n\n            \n                \n                    Defined in src/module/user/user.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    requestBody\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User } from '../../interface/user.interface';\nimport { makeSalt, encryptPassword } from '../../utils/cryptogram';\n\n@Injectable()\nexport class UserService {\n  constructor(@InjectModel('User') private userModule) {}\n\n  /**\n   * @description: 查找是否有这个人\n   * @param {*}\n   * @return {*}\n   */\n  findOne(name: string): Promise {\n    try {\n      return this.userModule.find({ name });\n    } catch (error) {\n      return void 0;\n    }\n  }\n\n  /**\n   * @description: 注册用户\n   * @param {*}\n   * @return {*}\n   */\n  async registerUser(requestBody: User): Promise {\n    const { name, passwd, email } = requestBody;\n    // 不能有相同用户名\n    const sameInfo = await this.findOne(name);\n    if (sameInfo.length) {\n      throw new HttpException(\n        {\n          message: '用户名重复',\n          status: HttpStatus.FORBIDDEN,\n        },\n        403,\n      );\n    }\n    const salt = makeSalt(); // 制作密码盐\n    const hashPasswd = encryptPassword(passwd, salt); // 加密密码\n    const data = {\n      name,\n      passwd: hashPasswd,\n      email,\n      salt,\n      create_time: Date.now().toString(),\n    };\n    console.log(data);\n\n    try {\n      await this.userModule(data).save();\n      return { msg: '注册用户成功' };\n    } catch (error) {\n      throw new HttpException(\n        {\n          message: '服务器错误',\n          status: HttpStatus.FORBIDDEN,\n        },\n        403,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "injectables/ValidationPipe.html": { "url": "injectables/ValidationPipe.html", "title": "injectable - ValidationPipe", "body": "\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pipe/validation.pipe.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            toValidate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: any)\n                \n            \n\n\n            \n                \n                    Defined in src/pipe/validation.pipe.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, undefined: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/pipe/validation.pipe.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  Injectable,\n  PipeTransform,\n  BadRequestException,\n} from '@nestjs/common';\nimport { validate } from 'class-validator';\nimport { plainToClass } from 'class-transformer';\n// import { Logger } from '../utils/log4js';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, { metatype }: ArgumentMetadata) {\n    console.log(`value:`, value, 'metatype: ', metatype);\n    if (!metatype || !this.toValidate(metatype)) {\n      // 如果没有传入验证规则，则不验证，直接返回数据\n      return value;\n    }\n    // 将对象转换为 Class 来验证\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      // 取出第一个提示\n      const msg = Object.values(errors[0].constraints)[0];\n      // Logger.error(`Validation failed: ${msg}`);\n      throw new BadRequestException(`Validation failed: ${msg}`);\n    }\n    return value;\n  }\n  private toValidate(metatype: any): boolean {\n    const types: any[] = [String, Boolean, Number, Array, Object];\n    return !types.includes(metatype);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "coverage.html": { "url": "coverage.html", "title": "coverage - coverage", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.config.ts\n            \n            variable\n            CONFIG_G\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.config.ts\n            \n            variable\n            JWT_CONFIG\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.config.ts\n            \n            variable\n            MONGO_DB\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.config.ts\n            \n            variable\n            MONGO_DB_DEV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.config.ts\n            \n            variable\n            OSS_CONFIG\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/interceptor/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/interceptor/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/interface/article.interface.ts\n            \n            interface\n            Article\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/interface/comment.interface.ts\n            \n            interface\n            Comment\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/interface/pagination.interface.ts\n            \n            interface\n            ArticleList\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/interface/pagination.interface.ts\n            \n            interface\n            Pagination\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/interface/user.interface.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/article/article.controller.ts\n            \n            controller\n            ArticleController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/module/article/article.dto.ts\n            \n            class\n            AddArticleDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/module/article/article.model.ts\n            \n            function\n            getDefaultOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/article/article.service.ts\n            \n            injectable\n            ArticleService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/module/article/comment.dto.ts\n            \n            class\n            AddCommentDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/module/auth/auth.config.ts\n            \n            variable\n            JWTConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/module/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/meta/meta.controller.ts\n            \n            controller\n            MetaController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/module/meta/meta.dto.ts\n            \n            class\n            AddMetaDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/module/meta/meta.service.ts\n            \n            injectable\n            MetaService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/module/publish/publish.controller.ts\n            \n            controller\n            PublishController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/module/publish/publish.service.ts\n            \n            injectable\n            PublishService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/module/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/module/user/user.dto.ts\n            \n            class\n            userDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/module/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/pipe/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/schema/article.schema.ts\n            \n            class\n            Article\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/schema/article.schema.ts\n            \n            variable\n            ArticleSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/schema/meta.schema.ts\n            \n            class\n            Meta\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/schema/meta.schema.ts\n            \n            variable\n            MetaSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/schema/users.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/schema/users.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/cryptogram.ts\n            \n            function\n            encryptPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/cryptogram.ts\n            \n            function\n            makeSalt\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "dependencies.html": { "url": "dependencies.html", "title": "package-dependencies - dependencies", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/common : ^7.5.1\n        \n            @nestjs/config : ^0.6.1\n        \n            @nestjs/core : ^7.5.1\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/mongoose : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.5.1\n        \n            @nestjs/swagger : ^4.7.9\n        \n            ali-oss : ^6.12.0\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            compression : ^1.7.4\n        \n            helmet : ^4.3.1\n        \n            lodash : ^4.17.20\n        \n            luxon : ^1.25.0\n        \n            mongoose : ^5.11.9\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.3\n        \n            swagger-ui-express : ^4.1.6\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "miscellaneous/functions.html": { "url": "miscellaneous/functions.html", "title": "miscellaneous-functions - functions", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            encryptPassword   (src/.../cryptogram.ts)\n                        \n                        \n                            getDefaultOptions   (src/.../article.model.ts)\n                        \n                        \n                            makeSalt   (src/.../cryptogram.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/cryptogram.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            encryptPassword\n                        \n                        \n                    \n                \n            \n            \n                \nencryptPassword(password, salt)\n                \n            \n\n\n\n\n            \n                \n                    Encrypt password\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        密码\n\n                                    \n                                \n                                \n                                    salt\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        密码盐\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            makeSalt\n                        \n                        \n                    \n                \n            \n            \n                \nmakeSalt()\n                \n            \n\n\n\n\n            \n                \n                    Make salt\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    src/module/article/article.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getDefaultOptions\n                        \n                        \n                    \n                \n            \n            \n                \ngetDefaultOptions()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "index.html": { "url": "index.html", "title": "getting-started - index", "body": "\n                   \n\n介绍\n\n这是一个由nodejs搭建的博客系统,不断完善中,后端采用nodejs最好的框架nestjs，使用typescript开发，，以及使用MongoDB数据库，认证部分使用JWT认证，上传接入阿里OSS，接入swagger，内容不断完善中。。。\n\n上线\nv0.0.1已上线\n使用docker虚拟化的nodejs+mongodb+pm2,构建于阿里云服务器\napi地址：http://api.forpad.netTO DO LIST\n\n 用户模块\n\n 用户注册\n 用户登录\n 用户权限认证\n 用户权限细分\n\n\n 公共模块\n\n 接入oss文件上传\n 网站信息配置\n\n\n 认证模块\n\n 用户组区分\n 用户组权限管理\n\n\n META模块(标签/分类)\n\n meta查看(根据type)\n META及分页查询\n META删除\n META修改\n\n\n 文章模块\n\n 文章查看\n 文章列表查询分页\n 文章新增\n 文章删除\n 文章修改\n 上传的数据进行用pipe做校验\n 文章归档\n 热门文章\n 相册\n 随机文章\n\n\n\n\n 评论模块\n\n 评论新增\n 最新评论\n 评论删除\n 所有评论查询\n\n\n 文件存储\n\n已经接入阿里云oss上传\n\n\n 服务端日志系统\n\n\nAPI DOCUMENT\n\n接口采用RESTful API设计规范\n\n文档说明\n\n有auth的接口表示需要token认证,token默认有效期为30天\n\n文章模块\n\n/article/\n\n\n@GET query({pageSize=10,pageCurrent=1}  ) 拉取文章列表\n@GET /param(_id:string) param 读取文章详情  \n@PUT /param(_id:string)   + body(article:Article) [auth] 修改文章详情\n@POST body(article:Article) [auth]  创建文章\n@DELETE /param(_id:string)  [auth]  删除文章\n\n用户模块\n\n/user/\n\n\nPOST body({name:string,passwd:string}) 注册用户\nPOST param /login body({name:string,passwd:string}) 用户登录\n\nMETA模块\n\n/meta/\n\n\n根据RESTful风格的增删改查\n\n评论模块\n\n@post /article/:id/comment\n\n公共模块\n图片上传\n\n@post /publish/upload\n\n起步\n $ npm installdevelopment\n$ npm run startwatch mode\n$ npm run start:devproduction mode\n$ npm run start:prodTest\nunit tests\n$ npm run teste2e tests\n$ npm run test:e2etest coverage\n$ npm run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "modules.html": { "url": "modules.html", "title": "modules - modules", "body": "\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ArticleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PublishModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "overview.html": { "url": "overview.html", "title": "overview - overview", "body": "\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_ArticleModule\n\n\n\ncluster_ArticleModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaModule\n\n\n\ncluster_MetaModule_providers\n\n\n\ncluster_PublishModule\n\n\n\ncluster_PublishModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nArticleModule\n\nArticleModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArticleModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaModule\n\nMetaModule\n\nAppModule -->\n\nMetaModule->AppModule\n\n\n\n\n\nPublishModule\n\nPublishModule\n\nAppModule -->\n\nPublishModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nArticleService\n\nArticleService\n\nArticleModule -->\n\nArticleService->ArticleModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nMetaService\n\nMetaService\n\nMetaModule -->\n\nMetaService->MetaModule\n\n\n\n\n\nPublishService\n\nPublishService\n\nPublishModule -->\n\nPublishService->PublishModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "classes/userDTO.html": { "url": "classes/userDTO.html", "title": "class - userDTO", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  userDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                passwd\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/user/user.dto.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(5, {message: '用户名不能小于过5位'})@MaxLength(20, {message: '用户名不能超过10位'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/user/user.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            passwd\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(5, {message: '密码不能小于过5位'})@MaxLength(10, {message: '密码不能超过10位'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/module/user/user.dto.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { MaxLength, MinLength, IsEmail } from 'class-validator';\nexport class userDTO {\n  @MinLength(5, { message: '用户名不能小于过5位' })\n  @MaxLength(20, { message: '用户名不能超过10位' })\n  readonly name: string;\n\n  @MinLength(5, { message: '密码不能小于过5位' })\n  @MaxLength(10, { message: '密码不能超过10位' })\n  readonly passwd: string;\n  // readonly add_time: string;\n  // readonly update_time: string;\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" }, "miscellaneous/variables.html": { "url": "miscellaneous/variables.html", "title": "miscellaneous-variables - variables", "body": "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ArticleSchema   (src/.../article.schema.ts)\n                        \n                        \n                            CONFIG_G   (src/.../app.config.ts)\n                        \n                        \n                            JWT_CONFIG   (src/.../app.config.ts)\n                        \n                        \n                            JWTConfig   (src/.../auth.config.ts)\n                        \n                        \n                            MetaSchema   (src/.../meta.schema.ts)\n                        \n                        \n                            MONGO_DB   (src/.../app.config.ts)\n                        \n                        \n                            MONGO_DB_DEV   (src/.../app.config.ts)\n                        \n                        \n                            OSS_CONFIG   (src/.../app.config.ts)\n                        \n                        \n                            UserSchema   (src/.../users.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/schema/article.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ArticleSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Article)\n                        \n                    \n\n\n            \n        \n\n    src/app.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CONFIG_G\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  PORT: 3000,\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            JWT_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  secret: 'wumao', // 秘钥\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MONGO_DB\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  uri: `mongodb://root@8.133.172.218:27017/blog?authSource=admin`,\n  username: 'root',\n  password: 'VDjXBQ@(TMrU31YRUC%[GEf;2osPLK',\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MONGO_DB_DEV\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  uri: `mongodb://127.0.0.1:27017/nestBlog`,\n  username: 'admin',\n  password: '123456',\n  url: 'mongodb://admin:123456@localhost:27017/nestBlog?authSource=admin',\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            OSS_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  accessKeyId: '',\n  accessKeySecret: 'GJtGIbBnBqmrkeOcy7uUBvjqcLXaLE',\n  bucket: 'nestblog',\n  region: 'oss-cn-hangzhou',\n  url: '//oss.forpad.net/',\n}\n                        \n                    \n\n\n            \n        \n\n    src/module/auth/auth.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            JWTConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  secret: 'wumao', // 秘钥\n}\n                        \n                    \n\n\n            \n        \n\n    src/schema/meta.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            MetaSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Meta)\n                        \n                    \n\n\n            \n        \n\n    src/schema/users.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(User)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n" } }
}
